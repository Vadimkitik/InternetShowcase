{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.component.ts","webpack:///src/app/auth/auth.component.html","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/registration/registration.component.ts","webpack:///src/app/auth/registration/registration.component.html","webpack:///src/app/shared/models/message.model.ts","webpack:///src/app/shared/models/user.model.ts"],"names":["authRoutes","path","component","children","AuthRoutingModule","forChild","imports","exports","AuthComponent","selector","templateUrl","AuthModule","declarations","LoginComponent","authService","router","route","tokenStorage","isLoggedIn","message","queryParams","subscribe","params","showMessage","text","type","form","required","email","minLength","window","setTimeout","login1","value","response","token","saveToken","saveUser","login","name","getUser","console","log","navigate","error","onSubmit","styleUrls","RegistrationComponent","usersService","forbiddenEmails","bind","passwordsAreEqual","phoneValidator","password","telephone","address","role","user","createUser","nowCanLoggin","control","Promise","resolve","reject","getUserByEmail","forbiddenEmail","group","dirty","touched","get","custom","pattern","test","costom","Message","User","id"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { RegistrationComponent } from \"./registration/registration.component\";\r\nimport { AuthComponent } from \"./auth.component\";\r\n\r\nconst authRoutes: Routes = [    \r\n    { path: '', component: AuthComponent, children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'registration', component: RegistrationComponent }\r\n        ] }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(authRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'wfm-auth',\r\n    templateUrl: './auth.component.html'\r\n})\r\nexport class AuthComponent {}","<div class=\"container\">\r\n    <div class=\"auth-container\">\r\n      <div class=\"card\">\r\n        <header class=\"auth-header\">\r\n          <h1 class=\"auth-title\">\r\n            Alleutina Shop\r\n          </h1>\r\n        </header>\r\n        <div class=\"auth-content\">\r\n          <router-outlet></router-outlet>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from '../material/material.module';\r\n\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        RegistrationComponent,\r\n        AuthComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        AuthRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class AuthModule {}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute, Params} from '@angular/router';\r\n\r\nimport { Message } from 'src/app/shared/models/message.model';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { TokenStorageService } from 'src/app/shared/services/token-storage.service';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  message: Message;\r\n  name: string;\r\n  isLoggedIn: boolean = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private tokenStorage: TokenStorageService\r\n    ) { }\r\n\r\n  ngOnInit() {\r\n    this.message = new Message('','');\r\n\r\n    this.route.queryParams\r\n      .subscribe((params: Params) => {\r\n        if(params['nowCanLoggin']) {\r\n          this.showMessage({\r\n            text:'Теперь вы можете зайти в систему',\r\n            type:'success'\r\n          });\r\n        }\r\n      });\r\n\r\n    this.form = new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'password': new FormControl(null, [Validators.required, Validators.minLength(6)])\r\n    })\r\n  }\r\n\r\n  showMessage(message: Message) {\r\n    this.message = message;\r\n    window.setTimeout(() => {\r\n      this.message.text = '';\r\n    }, 4000);\r\n  }\r\n  \r\n  onSubmit(){\r\n    this.authService.login1(this.form.value)\r\n      .subscribe(response => {         \r\n        const token = (<any>response).token;\r\n\r\n        this.tokenStorage.saveToken(token);\r\n        this.tokenStorage.saveUser(response);\r\n        \r\n        this.authService.login()\r\n        this.name=this.tokenStorage.getUser().name;      \r\n        this.message.text = '';\r\n        console.log('Loggin successful');  \r\n\r\n       this.router.navigate(['/admin-panel']);                \r\n      }, error => {\r\n        this.showMessage({\r\n          text:'Введен не правильный логин или пароль',\r\n          type:'danger'\r\n        });\r\n      });   \r\n  }\r\n}\r\n","<p class=\"text-xs-center\">Войдите для работы</p>\r\n<div\r\n class=\"alert alert-{{message.type}}\"\r\n *ngIf=\"message.text\"> {{ message.text }}</div>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n  <div\r\n    class=\"form-group\"\r\n    [ngClass]=\"{'has-error': form.get('email').invalid && form.get('email').touched}\"\r\n  >\r\n    <label for=\"email\">Email</label>\r\n    <input\r\n      type=\"text\"\r\n      class=\"form-control underlined\"\r\n      id=\"email\"\r\n      formControlName=\"email\"\r\n      placeholder=\"Введите ваш email\"\r\n    >\r\n    <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('email').invalid && form.get('email').touched\"\r\n      >\r\n      <span *ngIf=\"form.get('email')['errors']['required']\">Email не должен быть пустым.</span>\r\n      <span *ngIf=\"form.get('email')['errors']['email']\">Введите корректный email.</span>\r\n    </span>\r\n  </div>\r\n  \r\n  <div \r\n    class=\"form-group\"\r\n    [ngClass]=\"{'has-error': form.get('password').invalid && form.get('password').touched}\"\r\n  >\r\n    <label for=\"password\">Пароль</label>\r\n    <input\r\n      type=\"password\"\r\n      class=\"form-control underlined\"\r\n      id=\"password\"\r\n      formControlName=\"password\"\r\n      placeholder=\"Пароль\"\r\n    >\r\n    <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('password').invalid && form.get('password').touched\"\r\n     >\r\n     <span *ngIf=\"form.get('password')['errors']['required']\">Пароль не должен быть пустым.</span>\r\n      <span *ngIf=\"form.get('password')['errors']['minlength']\">\r\n        Пароль должен быть не меньше {{ form.get('password')['errors']['minlength']['requiredLength'] }} символов.\r\n      </span>\r\n    </span>\r\n  </div>\r\n  \r\n  <div class=\"form-group\">\r\n    <button \r\n      type=\"submit\" \r\n      class=\"btn btn-block btn-primary\"\r\n      [disabled]=\"form.invalid\"\r\n      >Войти\r\n    </button>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Нет аккаунта? <a [routerLink]=\"'/auth/registration'\">Зарегистрироваться!</a>\r\n    </p>\r\n  </div>\r\n</form>\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nimport { User } from 'src/app/shared/models/user.model';\r\nimport { UsersService } from 'src/app/shared/services/users.service';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n@Component({\r\n  selector: 'registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n    constructor(\r\n        private router: Router,\r\n        private usersService: UsersService\r\n  ) {}\r\n  \r\n\r\n  ngOnInit() {   \r\n    this.form =new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email], this.forbiddenEmails.bind(this)),\r\n      'passwords': new FormGroup({\r\n        'password': new FormControl(null, [Validators.required, Validators.minLength(6)]),\r\n        'confpassword': new FormControl(null, [Validators.required])\r\n       }, this.passwordsAreEqual()),\r\n      'name': new FormControl(null, Validators.required),\r\n      'telephone': new FormControl(null, [Validators.required, Validators.minLength(9), this.phoneValidator]),\r\n      'address': new FormControl(null, Validators.required),\r\n      'agree': new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  onSubmit(){\r\n    const { email, password, name, telephone, address, role} = this.form.value;\r\n    const user = new User\r\n    (\r\n      email, \r\n      this.form.value['passwords']['password'], \r\n      name, \r\n      \"375\" + this.form.value['telephone'], \r\n      address, \r\n      \"User\"\r\n    );\r\n\r\n      this.usersService.createUser(user)\r\n      .subscribe((user: User) => {\r\n        this.router.navigate(['/auth/login'], {\r\n          queryParams: {\r\n            nowCanLoggin: true\r\n          }\r\n        });\r\n   });\r\n  }\r\n\r\n  forbiddenEmails(control: FormControl) : Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.usersService.getUserByEmail(control.value)\r\n        .subscribe((user: User) => {\r\n          if(user) {\r\n            resolve({forbiddenEmail: true})\r\n          } else {\r\n            resolve(null)\r\n          }\r\n        })\r\n    })\r\n  }\r\n\r\n  private passwordsAreEqual(): ValidatorFn {\r\n    return (group: FormGroup): { [key: string]: any } => {\r\n      if (!(group.dirty || group.touched) || group.get('password').value === group.get('confpassword').value) {\r\n        return null;\r\n      }\r\n      return {\r\n        custom: 'Passwords are not equal.'\r\n      };\r\n    };\r\n  }\r\n  private phoneValidator(): ValidatorFn {\r\n    const pattern: RegExp = /^[\\+]?[(]?(0-9){3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im;\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      if (!(control.dirty || control.touched)) {\r\n        return null;\r\n      } else {\r\n      return pattern.test(control.value) ? null : {costom: 'Invalid phone number'}\r\n      }\r\n    };\r\n  }\r\n}\r\n","<p class=\"text-xs-center\">Регистрация для получения доступа</p>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n  <div \r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('email').invalid && form.get('email').touched}\"\r\n   >\r\n    <label for=\"email\">Email</label>\r\n    <input \r\n      type=\"text\" \r\n      class=\"form-control underlined\" \r\n      id=\"email\" \r\n      formControlName='email'\r\n      placeholder=\"Введите email\"\r\n    >\r\n    <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('email').invalid && form.get('email').touched\"\r\n      >\r\n      <span *ngIf=\"form.get('email')['errors']['required']\">Email не должен быть пустым.</span>\r\n      <span *ngIf=\"form.get('email')['errors']['email']\">Введите корректный email.</span>\r\n      <span *ngIf=\"form.get('email')['errors']['forbiddenEmail']\">Email уже занят.</span>\r\n    </span>\r\n  </div>\r\n \r\n  <div formGroupName=\"passwords\">\r\n  <div \r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('passwords').get('password').invalid && form.get('passwords').get('password').touched }\"\r\n   >\r\n    <label for=\"password\">Пароль</label>\r\n    <input \r\n      type=\"password\" \r\n      class=\"form-control underlined\" \r\n      id=\"password\"\r\n      formControlName=\"password\" \r\n      placeholder=\"Введите пароль\"\r\n      >\r\n      <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('passwords').get('password').invalid && form.get('passwords').get('password').touched\"\r\n      >\r\n      <span *ngIf=\"form.get('passwords').get('password')['errors']['required']\">Пароль не должен быть пустым.</span>\r\n      <span \r\n        *ngIf=\"form.get('passwords').get('password')['errors']['minlength']\"\r\n      >Пароль должен быть не меньше {{ form.get('passwords').get('password')['errors']['minlength']['requiredLength'] }} символов.\r\n    </span>\r\n    </span>\r\n  </div>\r\n  <div \r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('passwords').invalid && form.get('passwords').get('confpassword').touched }\"\r\n   >\r\n    <label for=\"confpassword\">Повторите пароль</label>\r\n    <input \r\n      type=\"password\" \r\n      class=\"form-control underlined\" \r\n      id=\"confpassword\"\r\n      formControlName=\"confpassword\" \r\n      placeholder=\"Повторите пароль\"\r\n      >\r\n      <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('passwords').invalid && form.get('passwords').get('confpassword').touched\"\r\n      >Пароли должны совпадать.\r\n    </span>\r\n  </div>\r\n</div>\r\n\r\n  <div \r\n    class=\"form-group\"\r\n    [ngClass]=\"{'has-error': form.get('name').invalid && form.get('name').touched}\"\r\n    >\r\n    <label for=\"name\">Имя</label>\r\n    <input \r\n      type=\"text\" \r\n      class=\"form-control underlined\" \r\n      id=\"name\"\r\n      formControlName=\"name\" \r\n      placeholder=\"Введите имя\"\r\n      >\r\n    <span\r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('name').invalid && form.get('name').touched\"\r\n      >\r\n      Введите имя.\r\n    </span>\r\n  </div>\r\n  <div\r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('telephone').invalid && form.get('telephone').touched}\"\r\n   >\r\n    <label for=\"telephone\">Телефон</label>\r\n    <input \r\n      type=\"text\"\r\n      pattern=\"[0-9]{9}\"\r\n      class=\"form-control underlined\" \r\n      id=\"telephone\"\r\n      formControlName=\"telephone\"\r\n      placeholder=\"Код и номер\"\r\n      maxlength=\"9\"\r\n      >\r\n      <span\r\n       class=\"form-help-text\"\r\n       *ngIf=\"form.get('telephone').invalid && form.get('telephone').touched\"\r\n       >\r\n        <span        \r\n          *ngIf=\"(form.get('telephone')['errors']['minlength'] \r\n          || form.get('telephone')['errors']['pattern'] \r\n          || form.get('telephone').invalid)  \r\n          && form.get('telephone').touched\"\r\n          >Введите номер телефона.\r\n        </span>\r\n      </span>\r\n  </div>\r\n  <div\r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('address').invalid && form.get('address').touched}\"\r\n   >\r\n    <label for=\"address\">Адрес</label>\r\n    <input\r\n      type=\"text\" \r\n      class=\"form-control underlined\" \r\n      id=\"address\"\r\n      formControlName=\"address\"\r\n      placeholder=\"г.Гродно, ул. Совецкая 15а, кв. 5\"\r\n      >\r\n      <span\r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('address').invalid && form.get('address').touched\"\r\n      >\r\n      Введите адрес.\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"agree\">\r\n      <input\r\n       class=\"checkbox\" \r\n       id=\"agree\" \r\n       type=\"checkbox\"\r\n       formControlName=\"agree\"\r\n       >\r\n      <span>Согласен с правилами</span>\r\n    </label>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <button\r\n     type=\"submit\" \r\n     class=\"btn btn-block btn-primary\"\r\n     [disabled]=\"form.invalid\"\r\n     >Зарегистрироваться</button>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Уже есть аккаунт?\r\n      <a [routerLink]=\"'/auth/login'\">\r\n        Войти!\r\n      </a>\r\n    </p>\r\n  </div>\r\n</form>","export class Message {\r\n    constructor(\r\n        public type: string,\r\n        public text: string\r\n    ) {}\r\n}","export class User {\r\n    constructor(\r\n        public email?: string,\r\n        public password?: string,\r\n        public name?: string,\r\n        public telephone?: string,\r\n        public address?: string,\r\n        public role?: string,\r\n        public id?: number) { }\r\n}"]}