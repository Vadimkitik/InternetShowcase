{"version":3,"sources":["webpack:///src/app/adminPanel/adminPanel-routing.module.ts","webpack:///src/app/adminPanel/adminPanel.component.ts","webpack:///src/app/adminPanel/adminPanel.component.html","webpack:///src/app/adminPanel/adminPanel.module.ts","webpack:///src/app/adminPanel/categories/categories-form/categories-create/categories-create.component.ts","webpack:///src/app/adminPanel/categories/categories-form/categories-create/categories-create.component.html","webpack:///src/app/adminPanel/categories/categories-form/categories-edit/categories-edit.component.ts","webpack:///src/app/adminPanel/categories/categories-form/categories-edit/categories-edit.component.html","webpack:///src/app/adminPanel/categories/categories-form/categories-form.component.ts","webpack:///src/app/adminPanel/categories/categories-form/categories-form.component.html","webpack:///src/app/adminPanel/categories/categories.component.ts","webpack:///src/app/adminPanel/categories/categories.component.html","webpack:///src/app/adminPanel/products/product-form/product-create/product-create.component.ts","webpack:///src/app/adminPanel/products/product-form/product-create/product-create.component.html","webpack:///src/app/adminPanel/products/product-form/product-edit/product-edit.component.ts","webpack:///src/app/adminPanel/products/product-form/product-edit/product-edit.component.html","webpack:///src/app/adminPanel/products/product-form/product-form.component.ts","webpack:///src/app/adminPanel/products/product-form/product-form.component.html","webpack:///src/app/adminPanel/products/product-form/upload/upload.component.ts","webpack:///src/app/adminPanel/products/product-form/upload/upload.component.html","webpack:///src/app/adminPanel/products/products.component.ts","webpack:///src/app/adminPanel/products/products.component.html","webpack:///src/app/adminPanel/test-json/test-json.component.ts","webpack:///src/app/adminPanel/users/users-form/user-resetpassword/user-resetpassword.component.ts","webpack:///src/app/adminPanel/users/users-form/user-resetpassword/user-resetpassword.component.html","webpack:///src/app/adminPanel/users/users-form/user-roles/user-roles/user-roles.component.ts","webpack:///src/app/adminPanel/users/users-form/user-roles/user-roles/user-roles.component.html","webpack:///src/app/adminPanel/users/users-form/users-create/users-create.component.ts","webpack:///src/app/adminPanel/users/users-form/users-create/users-create.component.html","webpack:///src/app/adminPanel/users/users-form/users-edit/users-edit.component.ts","webpack:///src/app/adminPanel/users/users-form/users-edit/users-edit.component.html","webpack:///src/app/adminPanel/users/users.component.ts","webpack:///src/app/adminPanel/users/users.component.html","webpack:///src/app/shared/models/category.model.ts","webpack:///src/app/shared/models/product.model.ts","webpack:///src/app/shared/models/user-role/user.model.ts","webpack:///src/app/shared/models/user-role/userRoles.model.ts","webpack:///src/app/shared/models/user-role/userWithRoles.model.ts"],"names":["adminRoutes","path","component","children","canActivate","AdminPanelRoutingModule","forChild","imports","exports","AdminPanelComponent","authService","router","isAdmin","date","Date","user","getUser","roles","includes","logout","navigate","onLogout","selector","templateUrl","styleUrls","AdminPanelModule","declarations","CategoriesCreateComponent","categoryService","toastrService","category","console","log","createCategory","subscribe","success","name","navigateByUrl","save","CategoriesEditComponent","activeRoute","loaded","categoryLine","snapshot","params","getCategory","data","updateCategory","CategoriesFormComponent","hide","required","line","categories","getCategories","push","id","parent_Id","products","hasError","CategoriesComponent","accessRights","columnsToDisplay","load","dataSource","paginator","sort","deleteCategory","res","event","filterValue","target","value","filter","trim","toLowerCase","firstPage","applyFilter","ProductCreateComponent","productService","product","createProduct","ProductEditComponent","uploadService","productLine","getProduct","updateProduct","ProductFormComponent","catService","treeService","uploadFinished","response","imageUrl","dbPath","list_to_tree","last_level_of_tree","error","errorMsg","UploadComponent","formData","FormData","onUploadFinished","uploadFile","files","length","fileToUpload","append","UploadFile","type","UploadProgress","progress","Math","round","total","Response","message","emit","body","ProductsComponent","getProducts","imageName","split","pop","DeleteFile","deleteProduct","height","minHeight","animations","TestJsonComponent","countryList","UserResetpasswordComponent","userValidate","userService","emailLine","getUserByEmail","form","minLength","userWithNewPassword","email","newpassword","get","changePassword","getErrorMessagePassw","UserRolesComponent","rolesService","userWithRoles","userRoles","userId","GetUserWithRoles","checked","index","indexOf","splice","EditUserRoles","userEmail","UsersCreateComponent","usersService","allRoles","GetAllRoles","createUser","userName","getErrorMessageName","getErrorMessageEmail","onSubmit","UsersEditComponent","updateUser","UsersComponent","toastrSrvice","getUsers","deleteUser","Category","Product","description","price","oldPrice","isFavourite","available","categoryId","User","password","UserRoles","UserWithRoles"],"mappings":"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","file":"adminPanel-adminPanel-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AdminGuard } from '../shared/services/guards/admin-guard.service';\r\nimport { AuthGuard } from '../shared/services/guards/auth-guard.service';\r\nimport { ManagerGuard } from '../shared/services/guards/manager-guard.service';\r\n\r\nimport { AdminPanelComponent } from './adminPanel.component';\r\nimport { CategoriesCreateComponent } from './categories/categories-form/categories-create/categories-create.component';\r\nimport { CategoriesEditComponent } from './categories/categories-form/categories-edit/categories-edit.component';\r\nimport { CategoriesComponent } from './categories/categories.component';\r\nimport { ProductsComponent } from \"./products/products.component\";\r\nimport { ProductCreateComponent } from './products/product-form/product-create/product-create.component';\r\nimport { ProductEditComponent } from './products/product-form/product-edit/product-edit.component';\r\nimport { TestJsonComponent } from './test-json/test-json.component';\r\nimport { UserRolesComponent } from './users/users-form/user-roles/user-roles/user-roles.component';\r\nimport { UsersCreateComponent } from './users/users-form/users-create/users-create.component';\r\nimport { UsersEditComponent } from './users/users-form/users-edit/users-edit.component';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { UserResetpasswordComponent } from './users/users-form/user-resetpassword/user-resetpassword.component';\r\n\r\nconst adminRoutes: Routes = [\r\n    \r\n    { path: '', component: AdminPanelComponent, children: [\r\n        { path: 'products', component: ProductsComponent },\r\n        { path: 'products/create', component: ProductCreateComponent, canActivate: [ManagerGuard] },\r\n        { path: 'products/edit/:productLine', component: ProductEditComponent, canActivate: [ManagerGuard] },\r\n        { path: 'users', component: UsersComponent, canActivate: [AdminGuard]  }, \r\n        { path: 'users/resetpassword/:email', component: UserResetpasswordComponent, canActivate: [AdminGuard] }, \r\n        { path: 'users/roles/:userId', component: UserRolesComponent, canActivate: [AdminGuard] }, \r\n        { path: 'users/create', component: UsersCreateComponent, canActivate: [AdminGuard] }, \r\n        { path: 'users/edit/:email', component: UsersEditComponent, canActivate: [AdminGuard] }, \r\n        { path: 'categories', component: CategoriesComponent },\r\n        { path: 'categories/create', component: CategoriesCreateComponent, canActivate: [ManagerGuard] },\r\n        { path: 'categories/edit/:categoryLine', component: CategoriesEditComponent, canActivate: [ManagerGuard] }\r\n    ] , canActivate: [AuthGuard]  }, \r\n    \r\n    { path: 'test', component: TestJsonComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(adminRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AdminPanelRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../shared/services/auth.service';\r\n\r\nimport { User } from '../shared/models/user-role/user.model';\r\n\r\n@Component({\r\n    selector: 'app',\r\n    templateUrl: './adminPanel.component.html',\r\n    styleUrls: ['./adminPanel.component.scss']\r\n})\r\nexport class AdminPanelComponent implements OnInit{\r\n\r\n    user: User;\r\n    isAdmin = false;\r\n    date: Date = new Date();\r\n    constructor(\r\n        private authService: AuthService,\r\n        private router: Router\r\n    ){}\r\n\r\n    ngOnInit(){\r\n        this.user = this.authService.getUser();\r\n        if (this.user == null) {\r\n            this.user = {\r\n                \"userName\": 'Guest',\r\n                \"email\": 'Example@example.com',\r\n                'roles': []\r\n            }\r\n        }\r\n        if (this.user.roles.includes('admin')){\r\n            this.isAdmin = true;\r\n        }\r\n    }\r\n    onLogout() {\r\n        this.authService.logout();\r\n        this.router.navigate(['/auth/login']);\r\n    }\r\n }","<div class=\"admin-container\">\r\n  <div class=\"admin-time\">\r\n    {{ date | date:'dd.MM.yyyy'}}\r\n  </div>\r\n  <div class=\"admin-nav\">\r\n    <button [routerLink]=\"['/admin-panel/products']\" class=\"createButton\" mat-raised-button>Товары</button>\r\n    <button [routerLink]=\"['/admin-panel/categories']\" class=\"createButton\" mat-raised-button>Категории</button>\r\n    <button [routerLink]=\"['/admin-panel/users']\"  class=\"createButton\" mat-raised-button>Пользователи</button>\r\n  </div> \r\n  <!-- *ngIf=\"isAdmin\" -->\r\n\r\n  <div class=\"admin-menu\">\r\n    <button mat-button [matMenuTriggerFor]=\"menu\">Hello, {{ user.userName }}</button>\r\n    <mat-menu #menu=\"matMenu\">\r\n      <button mat-menu-item>{{ user.email }}</button>\r\n      <button mat-menu-item (click)=\"onLogout()\">Выйти</button>\r\n    </mat-menu>\r\n  </div>\r\n</div>\r\n<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from '../material/material.module';\r\nimport { AdminPanelRoutingModule } from './adminPanel-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { ProductsComponent } from './products/products.component';\r\nimport { UploadComponent } from './products/product-form/upload/upload.component';\r\nimport { ProductCreateComponent } from './products/product-form/product-create/product-create.component';\r\nimport { ProductEditComponent } from './products/product-form/product-edit/product-edit.component';\r\nimport { ProductFormComponent } from './products/product-form/product-form.component';\r\nimport { TestJsonComponent } from './test-json/test-json.component';\r\nimport { AdminPanelComponent } from './adminPanel.component';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { CategoriesComponent } from './categories/categories.component';\r\nimport { UsersCreateComponent } from './users/users-form/users-create/users-create.component';\r\nimport { UsersEditComponent } from './users/users-form/users-edit/users-edit.component';\r\nimport { CategoriesFormComponent } from './categories/categories-form/categories-form.component';\r\nimport { CategoriesCreateComponent } from './categories/categories-form/categories-create/categories-create.component';\r\nimport { CategoriesEditComponent } from './categories/categories-form/categories-edit/categories-edit.component';\r\nimport { UserRolesComponent } from './users/users-form/user-roles/user-roles/user-roles.component';\nimport { UserResetpasswordComponent } from './users/users-form/user-resetpassword/user-resetpassword.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AdminPanelComponent,\r\n        ProductsComponent,\r\n        ProductFormComponent,\r\n        ProductCreateComponent,\r\n        ProductEditComponent,\r\n        UploadComponent,\r\n        TestJsonComponent,\r\n        UsersComponent,\r\n        CategoriesComponent,\r\n        UsersCreateComponent,\r\n        UsersEditComponent,\r\n        CategoriesFormComponent,\r\n        CategoriesCreateComponent,\r\n        CategoriesEditComponent,\r\n        UserRolesComponent,\r\n        UserResetpasswordComponent        \r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        AdminPanelRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class AdminPanelModule {\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { CategoryService } from 'src/app/shared/services/category.service';\r\n\r\n@Component({\r\n  selector: 'categories-create',\r\n  templateUrl: './categories-create.component.html',\r\n  styleUrls: ['./categories-create.component.css']\r\n})\r\nexport class CategoriesCreateComponent {\r\n\r\n    @Input() category: Category = new Category;    // добавляемый объект\r\n    constructor(\r\n        private categoryService: CategoryService,\r\n        private router: Router,\r\n        private toastrService: ToastrService) { }\r\n\r\n    save() {\r\n        console.log(this.category);\r\n        this.categoryService.createCategory(this.category).subscribe(() => {\r\n          this.toastrService.success(`Category ${this.category.name} is Created`);\r\n          this.router.navigateByUrl(\"/admin-panel/categories\")\r\n        });\r\n     }\r\n\r\n}\r\n","<div>\r\n    <h1 class=\"h1-line\"><span>Добавление новой категори</span></h1>\r\n    <categories-form [(category)]=\"category\"></categories-form>\r\n    <div class=\"form-group\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"save()\">Сохранить</button>\r\n        <button  mat-raised-button color=\"warn\" [routerLink]=\"'/admin-panel/categories'\">Отмена</button>\r\n    </div>\r\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { CategoryService } from 'src/app/shared/services/category.service';\r\n\r\n@Component({\r\n  selector: 'categories-edit',\r\n  templateUrl: './categories-edit.component.html',\r\n  styleUrls: ['./categories-edit.component.css']\r\n})\r\nexport class CategoriesEditComponent implements OnInit {\r\n\r\n  categoryLine: string;\r\n    @Input() category: Category;    // изменяемый объект\r\n    loaded: boolean = false;\r\n\r\n    constructor(\r\n        private categoryService: CategoryService,\r\n        private router: Router,\r\n        private toastrService: ToastrService,\r\n        activeRoute: ActivatedRoute\r\n        ) \r\n    {\r\n        this.categoryLine = activeRoute.snapshot.params[\"categoryLine\"];\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.categoryLine)\r\n            this.categoryService.getCategory(this.categoryLine)\r\n                .subscribe((data: Category) => {\r\n                    this.category = data;\r\n                    if (this.category != null) this.loaded = true;\r\n                });\r\n    }\r\n\r\n    save() {\r\n       console.log(this.category);\r\n        this.categoryService.updateCategory(this.category).subscribe(() => { \r\n            this.toastrService.success(`Category changed`);\r\n            this.router.navigateByUrl(\"/admin-panel/categories\")\r\n        });\r\n    }\r\n}\r\n","<h1 class=\"h1-line\"><span>Изменение категории</span></h1>\r\n<div *ngIf=\"loaded\">\r\n    <categories-form [(category)]=\"category\"></categories-form>\r\n    <div class=\"form-group\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"save()\">Сохранить</button>\r\n        <button [routerLink]=\"'/admin-panel/categories'\" mat-raised-button color=\"warn\">Назад</button>\r\n    </div>\r\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, Validators } from '@angular/forms';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { CategoryService } from 'src/app/shared/services/category.service';\r\n\r\n@Component({\r\n  selector: 'categories-form',\r\n  templateUrl: './categories-form.component.html',\r\n  styleUrls: ['./categories-form.component.css']\r\n})\r\nexport class CategoriesFormComponent implements OnInit {\r\n\r\n  @Input() category: Category;\r\n  @Input() categories: Category[];\r\n  loaded: boolean = false;\r\n  hide = true;\r\n  name = new FormControl('', [Validators.required]);\r\n  line = new FormControl('', [Validators.required]);\r\n\r\n\r\n  constructor(\r\n    private categoryService: CategoryService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    console.log(this.categories)\r\n    this.categoryService.getCategories().subscribe((data: Category[]) => {\r\n      this.categories = data;\r\n      this.categories.push({\r\n        children: null,\r\n        id: 0,\r\n        line: \"\",\r\n        name: \"Родительская категория\",\r\n        parent_Id: null,\r\n        products: null\r\n      })\r\n    });\r\n  }\r\n  getErrorMessage() {\r\n    if (this.name.hasError('required')) {\r\n      return 'You must enter a value';\r\n    }\r\n  }\r\n}\r\n","<div class=\"product-form\" >\r\n\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Path</mat-label>\r\n        <input \r\n        matInput placeholder=\"rozi,tulpani, bojiy_oduvanchik...\"\r\n        type=\"text\" [(ngModel)]=\"category.line\" \r\n        [formControl]=\"line\"\r\n        />\r\n        <mat-error *ngIf=\"line.invalid\">{{getErrorMessage()}}</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Название</mat-label>\r\n        <input matInput placeholder=\"Горшки, шары...\" \r\n        type=\"text\" [(ngModel)]=\"category.name\" \r\n        [formControl]=\"name\"\r\n        />\r\n        <mat-error *ngIf=\"name.invalid\">{{getErrorMessage()}}</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Parent_id</mat-label>\r\n        <mat-select [(ngModel)]=\"category.parent_Id\" >\r\n            <mat-option \r\n            value=\"{{category.id}}\"\r\n            *ngFor=\"let category of categories; let i = index\"\r\n            >\r\n                {{ category.name }}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n\r\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { User } from 'src/app/shared/models/user-role/user.model';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { CategoryService } from 'src/app/shared/services/category.service';\r\n\r\n@Component({\r\n  selector: 'categories',\r\n  templateUrl: './categories.component.html',\r\n  styleUrls: ['./categories.component.css']\r\n})\r\nexport class CategoriesComponent implements OnInit {\r\n\r\n  accessRights = false;\r\n  user: User;\r\n  dataSource: MatTableDataSource<Category>;\r\n  columnsToDisplay = [\r\n    'id', \r\n    'line', \r\n    'name',\r\n    'parent_Id', \r\n    'button'\r\n  ];\r\n  expandedElement: Category | null;\r\n  \r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  constructor(\r\n    private categoryService: CategoryService,\r\n    private toastrService: ToastrService,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.user = this.authService.getUser();\r\n    if(this.user.roles.includes('admin') || this.user.roles.includes('manager')){\r\n      this.accessRights = true;\r\n    }\r\n    this.load();\r\n  }\r\n\r\n  load() {\r\n    this.categoryService.getCategories().subscribe((data: Category[]) => {\r\n      this.dataSource = new MatTableDataSource(data);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    this.categoryService.deleteCategory(id).subscribe(res => { \r\n      this.toastrService.success(`Category with ID \"${id}\" is Deleted!`);\r\n      this.load();\r\n    });    \r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  } \r\n}\r\n","<button \r\n    [routerLink]=\"['/admin-panel/categories', 'create']\" \r\n    class=\"createButton\" \r\n    mat-raised-button\r\n    *ngIf=\"accessRights\"\r\n    >Создать Категорию\r\n</button>\r\n\r\n<mat-form-field>\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Some name..\" #input>\r\n  </mat-form-field>\r\n\r\n<table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows class=\"mat-elevation-z8\" matSort>\r\n    <ng-container \r\n        matColumnDef=\"{{column}}\"\r\n        *ngFor=\"let column of columnsToDisplay.slice(0, columnsToDisplay.length-1)\"\r\n    >\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> {{column}} </th>\r\n        <td mat-cell\r\n            *matCellDef=\"let element\"\r\n            class=\"example-element-text\"\r\n            > {{element[column]}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"button\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let category\">\r\n            <button \r\n                [routerLink]=\"['/admin-panel/categories/edit', category.line]\" \r\n                mat-raised-button \r\n                color=\"accent\"\r\n                *ngIf=\"accessRights\"\r\n                >Изменить\r\n            </button>\r\n            <button \r\n                (click)=\"delete(category.id)\" \r\n                mat-raised-button color=\"warn\"\r\n                *ngIf=\"accessRights\" \r\n                >Удалить\r\n            </button>\r\n        </td>\r\n    </ng-container>\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"></tr>\r\n\r\n    <!-- Row shown when there is no matching data. -->\r\n    <tr class=\"mat-row\" *matNoDataRow>\r\n        <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td>\r\n    </tr>\r\n</table>\r\n<mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" class=\"mat-elevation-z8\"></mat-paginator>","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { ProductService } from '../../../../shared/services/product.service';\r\nimport { Product } from '../../../../shared/models/product.model';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n    templateUrl: './product-create.component.html',\r\n    styleUrls: ['./product-create.component.scss']\r\n})\r\nexport class ProductCreateComponent {\r\n\r\n    product: Product = new Product();    // добавляемый объект\r\n    constructor(\r\n        private productService: ProductService,\r\n        private router: Router,\r\n        private toastrService: ToastrService\r\n        ) { }\r\n\r\n    save() {\r\n        console.log(this.product);\r\n        this.productService.createProduct(this.product).subscribe(() => {\r\n            this.toastrService.success(`Product ${this.product.name} Created`)\r\n             this.router.navigateByUrl(\"/admin-panel/products\")\r\n            });\r\n     }\r\n}\r\n","<div>\r\n    <h1 class=\"h1-line\"><span>Добавление нового товара</span></h1>\r\n    <product-form [(product)]=\"product\"></product-form>\r\n    <div class=\"form-group\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"save()\">Сохранить</button>\r\n        <button  mat-raised-button color=\"warn\" [routerLink]=\"'/admin-panel/products'\">Отмена</button>\r\n    </div>\r\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\nimport { ProductService } from '../../../../shared/services/product.service';\r\nimport { Product } from '../../../../shared/models/product.model';\r\nimport { UploadService } from 'src/app/shared/services/upload.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Component({\r\n    templateUrl: './product-edit.component.html',\r\n    styleUrls: ['./product-edit.component.scss']\r\n})\r\nexport class ProductEditComponent implements OnInit {\r\n\r\n    productLine: string;\r\n    @Input() product: Product;    // изменяемый объект\r\n    loaded: boolean = false;\r\n\r\n    constructor(\r\n        private productService: ProductService,\r\n        private router: Router, \r\n        private uploadService: UploadService,\r\n        private activeRoute: ActivatedRoute,\r\n        private toastrService: ToastrService\r\n        ) \r\n    {\r\n        this.productLine = activeRoute.snapshot.params[\"productLine\"];\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.productLine)\r\n            this.productService.getProduct(this.productLine)\r\n                .subscribe((data: Product) => {\r\n                    this.product = data;\r\n                    if (this.product != null) this.loaded = true;\r\n                });\r\n    }\r\n\r\n    save() {\r\n        this.productService.updateProduct(this.product).subscribe(() => {\r\n            this.toastrService.success(`Product changed`)\r\n            this.router.navigateByUrl(\"/admin-panel/products\")\r\n        });\r\n    }\r\n    // deleteFile() {\r\n    //     var imageName = this.product.imageUrl.split(\"\\\\\").pop();\r\n    //     this.uploadService.DeleteFile(imageName).subscribe(event => {\r\n    //         this.toastrService.success(`File ${imageName} is Deleted!`);\r\n    //         this.product.imageUrl = '';\r\n    //     });\r\n        \r\n    // }\r\n}","<div *ngIf=\"loaded\">\r\n        <h1 class=\"h1-line\"><span>Изменение товара</span></h1>\r\n    <product-form [(product)]=\"product\"></product-form>\r\n    <div class=\"form-group\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"save()\">Сохранить</button>\r\n        <button [routerLink]=\"'/admin-panel/products'\" mat-raised-button color=\"warn\">Назад</button>\r\n        <!-- <button mat-raised-button color=\"warn\" (click)=\"deleteFile()\" *ngIf=\"product.imageUrl\">Удалить фото</button> -->\r\n    </div>\r\n</div>","import { Component, Input } from '@angular/core';\r\n\r\nimport { Product } from '../../../shared/models/product.model';\r\nimport { Category } from '../../../shared/models/category.model';\r\nimport { CategoryService } from 'src/app/shared/services/category.service';\r\nimport { TreeService } from 'src/app/shared/services/tree.service';\r\n\r\n@Component({\r\n    selector: \"product-form\",\r\n    templateUrl: './product-form.component.html',\r\n    styleUrls: ['./product-form.component.scss'],\r\n})\r\nexport class ProductFormComponent {\r\n\r\n    @Input() response: { dbPath: '' };\r\n    categories: Category[];\r\n    @Input() product: Product;\r\n    public errorMsg;\r\n    loaded: boolean = false;\r\n\r\n    constructor(\r\n        private catService: CategoryService,\r\n        private treeService: TreeService\r\n        ) { }\r\n\r\n    ngOnInit() {\r\n        this.catService.getCategories().subscribe((categories: Category[]) => {\r\n            this.categories = this.treeService.list_to_tree(categories);\r\n            this.categories = this.treeService.last_level_of_tree(categories);\r\n            this.loaded = true;\r\n        }, error => this.errorMsg = error);\r\n        \r\n    }\r\n\r\n    uploadFinished = (event) => {\r\n        this.response = event; \r\n        this.product.imageUrl = this.response.dbPath;\r\n    }\r\n}","<div class=\"product-form\" *ngIf=\"loaded\">\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Path name</mat-label>\r\n        <input matInput placeholder=\"rozi,tulpani, bojiy_oduvanchik...\" type=\"text\" [(ngModel)]=\"product.productLine\" />\r\n    </mat-form-field>\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Название</mat-label>\r\n        <input matInput placeholder=\"Розы, тюльпаны, божий одуванчик...\" type=\"text\" [(ngModel)]=\"product.name\" />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field [style.fontSize]=\"16\" class=\"product-full-width\">\r\n        <mat-label>Описание товара</mat-label>\r\n        <textarea matInput\r\n                  [(ngModel)]=\"product.description\"\r\n                  cdkTextareaAutosize\r\n                  #autosize=\"cdkTextareaAutosize\"\r\n                  cdkAutosizeMinRows=\"1\"\r\n                  cdkAutosizeMaxRows=\"5\"></textarea>\r\n      </mat-form-field>\r\n\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Цена</mat-label>\r\n        <input matInput placeholder=\"5$\" type=\"number\" [(ngModel)]=\"product.price\" />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Старая цена, если нужна</mat-label>\r\n        <input matInput placeholder=\"4\" type=\"number\" [(ngModel)]=\"product.oldPrice\" />\r\n    </mat-form-field>\r\n\r\n    <app-upload (onUploadFinished)=\"uploadFinished($event)\"></app-upload> \r\n\r\n    <img style=\"width: 50%;\" src=\"{{product.imageUrl}}\" alt=\"\">\r\n\r\n    <mat-radio-group class=\"product-full-width\" aria-label=\"Является ли он топом\" [(ngModel)]=\"product.isFavourite\" required>\r\n        <mat-label>Является ли он топом: </mat-label>\r\n        <mat-radio-button value=\"true\" color=\"primary\">Да</mat-radio-button>\r\n        <mat-radio-button value=\"false\">Нет</mat-radio-button>\r\n    </mat-radio-group>\r\n\r\n\r\n    <mat-radio-group class=\"product-full-width\" aria-label=\"Есть ли в наличии\" [(ngModel)]=\"product.available\" >\r\n        <mat-label>Есть ли в наличии: </mat-label>\r\n        <mat-radio-button value=\"true\" color=\"primary\">Да</mat-radio-button>\r\n        <mat-radio-button value=\"false\">Нет</mat-radio-button>\r\n    </mat-radio-group>\r\n\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Категория товара</mat-label>\r\n        <h1>{{errorMsg}}</h1>\r\n        <mat-select [(ngModel)]=\"product.categoryId\" >\r\n            <mat-option \r\n            value=\"{{category.id}}\"\r\n            *ngFor=\"let category of categories; let i = index\"\r\n            >\r\n                {{ category.name }}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n</div>","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { HttpEventType } from '@angular/common/http';\r\n\r\nimport { UploadService } from 'src/app/shared/services/upload.service';\r\n\r\n@Component({\r\n  selector: 'app-upload',\r\n  templateUrl: './upload.component.html',\r\n  styleUrls: ['./upload.component.css']\r\n})\r\nexport class UploadComponent implements OnInit {\r\n\r\n  formData = new FormData();\r\n  message: string;\r\n  progress: number;\r\n  @Output() public onUploadFinished = new EventEmitter();\r\n\r\n  constructor(private uploadService: UploadService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  uploadFile = (files) => {\r\n    if(files.length === 0)\r\n      return;\r\n\r\n    let fileToUpload = <File>files[0];\r\n    \r\n    this.formData.append('file', fileToUpload, fileToUpload.name);\r\n\r\n    this.uploadService.UploadFile(this.formData).subscribe(event => {\r\n        if(event.type === HttpEventType.UploadProgress) {\r\n            this.progress = Math.round(100 * event.loaded / event.total);\r\n        }\r\n        else if(event.type === HttpEventType.Response) {\r\n            this.message = 'Upload file success!';\r\n            this.onUploadFinished.emit(event.body);\r\n        }\r\n    }, error => this.message = error);\r\n}\r\n\r\n}\r\n","<div class=\"row\" style=\"margin-bottom:15px;\">\r\n        <div class=\"col-md-3\">\r\n            <input \r\n                type=\"file\"\r\n                #file placeholder=\"Choose file\"\r\n                (change)=\"uploadFile(file.files)\"\r\n                style=\"display:none;\"\r\n                >\r\n                <button mat-raised-button color=\"primary\" (click)=\"file.click()\">Загрузить фото</button>\r\n        </div>\r\n        <div class=\"col-md-9\">\r\n            <span class=\"upload\" *ngIf=\"progress > 0\">\r\n                {{progress}}%\r\n            </span>\r\n            <span class=\"upload\" *ngIf=\"message\">\r\n                {{message}}\r\n            </span>\r\n        </div>\r\n    </div>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\nimport { Product } from 'src/app/shared/models/product.model';\r\nimport { ProductService } from 'src/app/shared/services/product.service';\r\nimport { UploadService } from 'src/app/shared/services/upload.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { User } from 'src/app/shared/models/user-role/user.model';\r\n\r\n@Component({\r\n  selector: 'products',\r\n  templateUrl: './products.component.html',\r\n  styleUrls: ['./products.component.css'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0' })),\r\n      state('expanded', style({ height: '*' })),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ]\r\n})\r\nexport class ProductsComponent implements OnInit {\r\n\r\n  accessRights = false;\r\n  user: User;\r\n  dataSource: MatTableDataSource<Product>;\r\n  columnsToDisplay = [ \r\n    'name', \r\n    'price', \r\n    'oldPrice', \r\n    'isFavourite',\r\n    'available',\r\n    'category',\r\n    'button'\r\n  ];\r\n  expandedElement: Product | null;\r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  constructor(\r\n    private productService: ProductService,\r\n    private uploadService: UploadService,\r\n    private toastrService: ToastrService,\r\n    private authService: AuthService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.user = this.authService.getUser();\r\n    if(this.user.roles.includes('admin') || this.user.roles.includes('manager')){\r\n      this.accessRights = true;\r\n    }\r\n    this.load();\r\n  }\r\n\r\n  load() {    \r\n    this.productService.getProducts().subscribe((data: Product[]) => {\r\n      this.dataSource = new MatTableDataSource(data);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    });\r\n  }\r\n\r\n  delete(id: number, imageUrl: string) {\r\n    var imageName = imageUrl.split(\"\\\\\").pop();\r\n        this.uploadService.DeleteFile(imageName).subscribe(event => {\r\n          this.toastrService.success(`Removal image ${imageName} successful`)\r\n        });\r\n    this.productService.deleteProduct(id).subscribe(data => { \r\n      this.toastrService.success(`Removal product with id ${id} successful`)\r\n      this.load();\r\n    });    \r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n}\r\n","<button \r\n    [routerLink]=\"['/admin-panel/products/', 'create']\" \r\n    *ngIf=\"accessRights\" \r\n    class=\"createButton\" \r\n    mat-raised-button\r\n    >Добавить товар\r\n</button>\r\n\r\n<mat-form-field>\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Роза..\" #input>\r\n  </mat-form-field>\r\n<table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows class=\"mat-elevation-z8\" matSort>\r\n    <ng-container \r\n        matColumnDef=\"{{column}}\"\r\n        *ngFor=\"let column of columnsToDisplay.slice(0, columnsToDisplay.length-1)\"\r\n    >\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> {{column}} </th>\r\n        <td mat-cell\r\n            *matCellDef=\"let element\"\r\n            class=\"example-element-text\"\r\n            > {{element[column]}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"button\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let product\">\r\n            <button\r\n                *ngIf=\"accessRights\"\r\n                [routerLink]=\"['/admin-panel/products/edit', product.productLine]\" \r\n                mat-raised-button\r\n                color=\"accent\"\r\n                >Изменить\r\n            </button>\r\n            <button \r\n                (click)=\"delete(product.id, product.imageUrl)\"\r\n                *ngIf=\"accessRights\"\r\n                mat-raised-button color=\"warn\"\r\n                >Удалить\r\n            </button>\r\n        </td>\r\n    </ng-container>\r\n\r\n    <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\r\n    <ng-container matColumnDef=\"expandedDetail\">\r\n        <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"columnsToDisplay.length\">\r\n            <div class=\"example-element-detail\" [@detailExpand]=\"element == expandedElement ? 'expanded' : 'collapsed'\">\r\n                <div class=\"example-element-diagram\">\r\n                    <div class=\"example-element-name\">\r\n                        <img [src]=\"element.imageUrl\" alt=\"\">\r\n                    </div>\r\n                </div>\r\n                <div class=\"example-element-description\">\r\n                    <p>\r\n                        Строка в Url: \r\n                        <span class=\"example-element-description-attribution\">\r\n                            {{ element.productLine}}.\r\n                       </span>\r\n                    </p>\r\n                    <p>\r\n                    Описание :\r\n                        <span class=\"example-element-description-attribution\">\r\n                             {{element.description}}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n    <tr mat-row *matRowDef=\"let element; columns: columnsToDisplay;\" class=\"example-element-row\"\r\n        [class.example-expanded-row]=\"expandedElement === element\"\r\n        (click)=\"expandedElement = expandedElement === element ? null : element\">\r\n    </tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: ['expandedDetail']\" class=\"example-detail-row\"></tr>\r\n    <!-- Row shown when there is no matching data. -->\r\n    <tr class=\"mat-row\" *matNoDataRow>\r\n        <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td>\r\n    </tr>\r\n</table>\r\n<mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" class=\"mat-elevation-z8\"></mat-paginator>","import { Component, OnInit } from '@angular/core';\r\nimport dataJson from '../../jsonFiles/dataJson.json';\r\n\r\n@Component({\r\n  selector: 'test-json',\r\n  templateUrl: './test-json.component.html',\r\n  styleUrls: ['./test-json.component.css']\r\n})\r\nexport class TestJsonComponent implements OnInit {\r\n\r\n  constructor() { }\r\n  public countryList: { id: number, name: string, parentId: number, children: [] }[] = dataJson;\r\n\r\n  ngOnInit(): void { \r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { User } from 'src/app/shared/models/user-role/user.model';\nimport { UsersService } from 'src/app/shared/services/users.service';\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\n\n@Component({\n  selector: 'user-resetpassword',\n  templateUrl: './user-resetpassword.component.html',\n  styleUrls: ['./user-resetpassword.component.css']\n})\nexport class UserResetpasswordComponent implements OnInit {\n\n  emailLine: string;\n  loaded: boolean = false;\n  user: User;\n  form: FormGroup;\n\n  constructor(\n    private router: Router,\n    private toastrService: ToastrService,\n    private userValidate: UserValidateService,\n    private activeRoute: ActivatedRoute,\n    private userService: UsersService\n  ) {\n    this.emailLine = activeRoute.snapshot.params[\"email\"];\n  }\n\n  ngOnInit(): void {\n    if (this.emailLine) {\n      this.userService.getUserByEmail(this.emailLine)\n        .subscribe((data: User) => {\n          this.user = data;\n          if (this.user != null) {\n            this.form = new FormGroup({\n              'newPassword': new FormControl('', [Validators.required, Validators.minLength(6)])\n            });\n            this.loaded = true;\n          }\n        });\n    }\n  }\n\n  onSubmit() {\n    let userWithNewPassword = {\n      id: this.user.id,\n      email: this.user.email,\n      newpassword: this.form.get('newPassword').value\n    };\n    this.userService.changePassword(userWithNewPassword).subscribe(data => {\n      this.toastrService.success(`Пароль изменен`);\n      this.router.navigate(['/admin-panel/users']);\n    });\n  }\n\n  getErrorMessagePassw() {\n    return this.userValidate.getErrorMessagePassw(this.form.get('newPassword'));\n  }\n\n}\n","<h1 class=\"h1-line\"><span>Сброс пароля</span></h1>\n<div *ngIf=\"loaded\">\n  <div class=\"form\">\n    <form class=\"product-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n      <h3>Email: {{ user.email}}</h3>\n      <div class=\"example-container\">\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Введите пароль</mat-label>\n          <input matInput formControlName=\"newPassword\" type=\"password\" required />\n          <mat-error *ngIf=\"form.get('newPassword').invalid\n                                && form.get('newPassword').touched\">{{getErrorMessagePassw()}}\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Сохранить</button>\n      <button [routerLink]=\"'/admin-panel/users'\" mat-raised-button color=\"warn\">Назад</button>\n    </form>\n  </div>\n</div>\n<div class=\"form-group_notFound\" *ngIf=\"!loaded\">\n  <button [routerLink]=\"'/admin-panel/users'\" mat-raised-button color=\"warn\">Назад</button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\n\nimport { UserRoles } from 'src/app/shared/models/user-role/userRoles.model';\nimport { UserWithRoles } from 'src/app/shared/models/user-role/userWithRoles.model';\nimport { RolesService } from 'src/app/shared/services/roles.service';\n\n@Component({\n  selector: 'user-roles',\n  templateUrl: './user-roles.component.html',\n  styleUrls: ['./user-roles.component.css']\n})\nexport class UserRolesComponent implements OnInit {\n\n  userId: string;\n  userWithRoles: UserWithRoles = new UserWithRoles();\n  userRoles: UserRoles = new UserRoles();   \n  loaded: boolean = false;\n  \n  constructor(\n      private router: Router,\n      private toastrService: ToastrService,\n      private rolesService: RolesService,\n      private activeRoute: ActivatedRoute\n      ) {\n        this.userId = activeRoute.snapshot.params[\"userId\"];\n       }\n\n  ngOnInit() {\n    if (this.userId) {\n      this.rolesService.GetUserWithRoles(this.userId)\n          .subscribe( res => {\n              this.userWithRoles = res;\n              if (this.userWithRoles != null) {\n                  this.loaded = true;\n                  this.userRoles = {\n                    userId: res.userId,\n                    roles: res.userRoles\n                  }\n              }              \n          });\n  }    \n}\n\nonToggle(event) {\n  if (event.checked) {\n    this.userRoles.roles.push(event.value)\n  }\n  else {\n    let index = this.userRoles.roles.indexOf(event.value);\n    if(index > -1) {\n      this.userRoles.roles.splice(index, 1);\n    }    \n  }\n}\n\nsave() {\n  this.rolesService.EditUserRoles(this.userRoles).subscribe(res => {\n    this.toastrService.success(`Roles for ${this.userWithRoles.userEmail} changed successfully!`);\n    this.router.navigate([\"/admin-panel/users\"]);\n  })\n}\n}\n","<h1 class=\"h1-line\"><span>Изменение ролей для пользователя</span></h1>\n<div *ngIf=\"loaded\">\n    <div class=\"form\">\n        <div class=\"product-form\">\n            <h3>Email: {{ userWithRoles.userEmail}}</h3>\n            <div class=\"form-group\">\n                <section class=\"example-section\" *ngFor=\"let role of userWithRoles.allRoles\">\n                    <mat-checkbox class=\"example-margin\" #roleCheck\n                        checked=\"{{userRoles.roles.includes(role.name)? 'checked': ''}}\" (change)=\"onToggle(roleCheck)\"\n                        value=\"{{role.name}}\">{{ role.name }}\n                    </mat-checkbox>\n                </section>\n            </div>\n            <button mat-raised-button color=\"primary\" (click)=\"save()\">Сохранить</button>\n            <button [routerLink]=\"'/admin-panel/users'\" mat-raised-button color=\"warn\">Назад</button>\n        </div>\n    </div>\n</div>\n<div class=\"form-group_notFound\" *ngIf=\"!loaded\">\n    <button [routerLink]=\"'/admin-panel/users'\" mat-raised-button color=\"warn\">Назад</button>\n</div>","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\nimport { User } from 'src/app/shared/models/user-role/user.model';\r\nimport { UserValidateService } from '../../../../shared/services/userValidate.service';\r\nimport { UsersService } from 'src/app/shared/services/users.service';\r\nimport { UserRoles } from 'src/app/shared/models/user-role/userRoles.model';\r\nimport { RolesService } from 'src/app/shared/services/roles.service';\r\n\r\n@Component({\r\n  selector: 'users-create',\r\n  templateUrl: './users-create.component.html',\r\n  styleUrls: ['./users-create.component.css']\r\n})\r\nexport class UsersCreateComponent implements OnInit {\r\n\r\n  @Input() user: User = new User();  \r\n  loaded: boolean = false;\r\n  hide = true;\r\n  form: FormGroup;\r\n  userRoles: Array<string> = [];\r\n  allRoles: Array<string> = [];\r\n  \r\n  constructor(\r\n      private usersService: UsersService,\r\n      private router: Router,\r\n      private toastrService: ToastrService,\r\n      private userValidate: UserValidateService,\r\n      private rolesService: RolesService\r\n      ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.rolesService.GetAllRoles().subscribe(res => {\r\n      this.allRoles = res;\r\n    })\r\n    this.form = new FormGroup({\r\n      'userName': new FormControl('', [Validators.required]),\r\n      'email': new FormControl('', [Validators.required, Validators.email]),\r\n      'password': new FormControl('', [Validators.required, Validators.minLength(5)])\r\n    })\r\n  }\r\n\r\n  onToggle(event) {\r\n    if (event.checked) {\r\n      this.userRoles.push(event.value)\r\n    }\r\n    else {\r\n      let index = this.userRoles.indexOf(event.value);\r\n      if(index > -1) {\r\n        this.userRoles.splice(index, 1);\r\n      }    \r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    this.user.roles = this.userRoles;\r\n    console.log(this.user)\r\n    this.usersService.createUser(this.user).subscribe(() => {\r\n      this.toastrService.success(`User ${this.user.userName} is Created`);\r\n      this.router.navigateByUrl(\"/admin-panel/users\")\r\n      \r\n    });\r\n  }\r\n\r\n  getErrorMessageName() {\r\n    return this.userValidate.getErrorMessageName(this.form.get('userName'));\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    return this.userValidate.getErrorMessageEmail(this.form.get('email'));\r\n  }\r\n\r\n  getErrorMessagePassw() {\r\n    return this.userValidate.getErrorMessagePassw(this.form.get('password'));\r\n  }\r\n}\r\n","<h1 class=\"h1-line\"><span>Добавление нового пользователя</span></h1>\r\n<form class=\"product-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n    <mat-form-field class=\"product-full-width\">\r\n        <mat-label>Name</mat-label>\r\n        <input matInput placeholder=\"rozi,tulpani, bojiy_oduvanchik...\" type=\"text\" formControlName=\"userName\"\r\n            [(ngModel)]=\"user.userName\" />\r\n        <mat-error *ngIf=\"form.get('userName').invalid\">{{getErrorMessageName()}}</mat-error>\r\n    </mat-form-field>\r\n    \r\n    <mat-form-field appearance=\"fill\" class=\"product-full-width\">\r\n        <mat-label>Email</mat-label>\r\n        <input matInput placeholder=\"pat@example.com\" [(ngModel)]=\"user.email\" formControlName=\"email\" required>\r\n        <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"fill\" class=\"product-full-width\">\r\n        <mat-label>Введите пароль</mat-label>\r\n        <input matInput formControlName=\"password\" [(ngModel)]=\"user.password\" [type]=\"hide ? 'password' : 'text'\">\r\n        <mat-error *ngIf=\"form.get('password').invalid\">{{getErrorMessagePassw()}}</mat-error>\r\n        <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\r\n            [attr.aria-pressed]=\"hide\">\r\n            <mat-icon>{{hide ? \"visibility_off\" : 'visibility'}}</mat-icon>\r\n        </button>\r\n    </mat-form-field>\r\n\r\n    <div class=\"form-group\" >\r\n        <section class=\"example-section\" *ngFor=\"let role of allRoles\">\r\n            <mat-checkbox                   \r\n                class=\"example-margin\"\r\n                #roleCheck\r\n                checked=\"{{userRoles.includes(role.name)? 'checked': ''}}\"\r\n                (change)=\"onToggle(roleCheck)\"\r\n                value=\"{{role.name}}\"\r\n                >{{ role.name }}\r\n            </mat-checkbox>\r\n        </section>        \r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Сохранить</button>\r\n        <button mat-raised-button color=\"warn\" [routerLink]=\"'/admin-panel/users'\">Отмена</button>\r\n    </div>\r\n</form>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { User } from 'src/app/shared/models/user-role/user.model';\r\nimport { UsersService } from 'src/app/shared/services/users.service';\r\nimport { UserValidateService } from '../../../../shared/services/userValidate.service';\r\n\r\n@Component({\r\n    selector: 'users-edit',\r\n    templateUrl: './users-edit.component.html',\r\n    styleUrls: ['./users-edit.component.css']\r\n})\r\nexport class UsersEditComponent implements OnInit {\r\n\r\n    emailLine: string;\r\n    @Input() user: User;    // изменяемый объект\r\n    loaded: boolean = false;\r\n    form: FormGroup;\r\n\r\n    constructor(\r\n        private userService: UsersService,\r\n        private router: Router,\r\n        private toastrService: ToastrService,\r\n        private userValidate: UserValidateService,\r\n        activeRoute: ActivatedRoute\r\n    ) {\r\n        this.emailLine = activeRoute.snapshot.params[\"email\"];\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.emailLine) {\r\n            this.userService.getUserByEmail(this.emailLine)\r\n                .subscribe((data: User) => {\r\n                    this.user = data;\r\n                    if (this.user != null) {\r\n                        this.form = new FormGroup({\r\n                            'userName': new FormControl('', [Validators.required]),\r\n                            'email': new FormControl('', [Validators.required, Validators.email])\r\n                        });\r\n                        this.loaded = true;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    onSubmit() {\r\n        this.userService.updateUser(this.user).subscribe(() => {\r\n            this.toastrService.success(`User changed`);\r\n            this.router.navigateByUrl(\"/admin-panel/users\");\r\n        });\r\n    }\r\n\r\n    getErrorMessageName() {\r\n        return this.userValidate.getErrorMessageName(this.form.get('userName'));\r\n    }\r\n\r\n    getErrorMessageEmail() {\r\n        return this.userValidate.getErrorMessageEmail(this.form.get('email'));\r\n    }\r\n}\r\n","<div *ngIf=\"loaded\">\r\n    <h1 class=\"h1-line\"><span>Изменение пользователя</span></h1>\r\n    <form class=\"product-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <mat-form-field class=\"product-full-width\">\r\n            <mat-label>Name</mat-label>\r\n            <input matInput placeholder=\"rozi,tulpani, bojiy_oduvanchik...\" type=\"text\" formControlName=\"userName\"\r\n                [(ngModel)]=\"user.userName\" />\r\n            <mat-error *ngIf=\"form.get('userName').invalid\">{{getErrorMessageName()}}</mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"fill\" class=\"product-full-width\">\r\n            <mat-label>Email</mat-label>\r\n            <input matInput placeholder=\"pat@example.com\" [(ngModel)]=\"user.email\" formControlName=\"email\" required>\r\n            <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n        </mat-form-field>\r\n\r\n        <div class=\"form-group\">\r\n            <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"form.invalid\">Сохранить</button>\r\n            <button [routerLink]=\"'/admin-panel/users'\" mat-raised-button color=\"warn\">Назад</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div class=\"form-group_notFound\" *ngIf=\"!loaded\">\r\n    <button [routerLink]=\"'/admin-panel/users'\" mat-raised-button color=\"warn\">Назад</button>\r\n</div>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Category } from 'src/app/shared/models/category.model';\r\nimport { User } from 'src/app/shared/models/user-role/user.model';\r\nimport { UsersService } from 'src/app/shared/services/users.service';\r\n\r\n@Component({\r\n  selector: 'users-list',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.css']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n\r\n  dataSource: MatTableDataSource<User>;\r\n  columnsToDisplay = [\r\n    'email', \r\n    'userName',\r\n    'button'\r\n  ];\r\n  expandedElement: User | null;\r\n  categories: Category;\r\n  \r\n\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  constructor(\r\n    private usersService: UsersService,\r\n    private toastrSrvice: ToastrService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.load();\r\n  }\r\n\r\n  load() {\r\n    this.usersService.getUsers().subscribe((data: User[]) => {\r\n      this.dataSource = new MatTableDataSource(data);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    this.usersService.deleteUser(id).subscribe(res => { \r\n      this.toastrSrvice.success(`User with ID \"${id}\" is Deleted!`);\r\n      this.load();\r\n    });    \r\n  }\r\n\r\n  applyFilter(event: Event) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n}\r\n","<button [routerLink]=\"['/admin-panel/users', 'create']\" class=\"createButton\" mat-raised-button>Добавить\r\n    Пользователя</button>\r\n\r\n<mat-form-field>\r\n    <mat-label>Filter</mat-label>\r\n    <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Some name..\" #input>\r\n</mat-form-field>\r\n\r\n<table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows class=\"mat-elevation-z8\" matSort>\r\n    <ng-container matColumnDef=\"{{column}}\" *ngFor=\"let column of columnsToDisplay.slice(0, columnsToDisplay.length-1)\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> {{column}} </th>\r\n        <td mat-cell *matCellDef=\"let element\" class=\"example-element-text\"> {{element[column]}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"button\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let user\">\r\n            <button mat-raised-button color=\"accent\" [matMenuTriggerFor]=\"menu\">Управление пользователем</button>\r\n            <mat-menu #menu=\"matMenu\">\r\n                <button [routerLink]=\"['/admin-panel/users/edit', user.email]\"\r\n                    mat-menu-item \r\n                    >Изменить\r\n                </button>\r\n                <button [routerLink]=\"['/admin-panel/users/roles', user.id]\"\r\n                    mat-menu-item \r\n                    >Права доступа\r\n                </button>\r\n                <button [routerLink]=\"['/admin-panel/users/resetpassword', user.email]\"\r\n                    mat-menu-item \r\n                    >Сменить пароль\r\n                </button>\r\n                <button (click)=\"delete(user.id)\" \r\n                    mat-menu-item\r\n                    >Удалить\r\n                </button>\r\n            </mat-menu>            \r\n        </td>\r\n    </ng-container>\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"></tr>\r\n\r\n    <!-- Row shown when there is no matching data. -->\r\n    <tr class=\"mat-row\" *matNoDataRow>\r\n        <td class=\"mat-cell\" colspan=\"4\">No data matching the filter \"{{input.value}}\"</td>\r\n    </tr>\r\n</table>\r\n<mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\" class=\"mat-elevation-z8\"></mat-paginator>","import { Product } from './product.model';\r\n\r\nexport class Category {\r\n    constructor(\r\n        public id?: number,\r\n        public line?: string,\r\n        public name?: string,\r\n        public parent_Id?: number,\r\n        public products?: Product[],\r\n        public children?: null\r\n        ){ }\r\n}","import { Category } from './category.model';\r\n\r\nexport class Product {\r\n    constructor(\r\n        public id?: number,\r\n        public name?: string,\r\n        public productLine?: string,\r\n        public description?: string,\r\n        public price?: number,\r\n        public oldPrice?: number,\r\n        public imageUrl?: string,\r\n        public isFavourite?: boolean,\r\n        public available?: boolean,\r\n        public categoryId?: number,\r\n        public Category?: Category\r\n        ) { }\r\n}\r\n\r\n","export class User {\r\n    constructor(\r\n        public userName?: string,\r\n        public email?: string,\r\n        public password?: string,\r\n        public roles?: Array<string>,\r\n        public id?: string) { }\r\n}","export class UserRoles {\r\n    constructor(\r\n        public userId?: string,\r\n        public roles?: Array<string>\r\n    ){ }\r\n}","import { Role } from './role.model';\r\n\r\nexport class UserWithRoles {\r\n    constructor(\r\n        public userId?: string,\r\n        public userEmail?: string,\r\n        public allRoles?: Array<Role>,\r\n        public userRoles?: Array<string>\r\n    ){ }\r\n}"]}