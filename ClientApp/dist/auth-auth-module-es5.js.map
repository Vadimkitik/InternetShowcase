{"version":3,"sources":["webpack:///src/app/auth/registration/registration.component.ts","webpack:///src/app/auth/registration/registration.component.html","webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/confirm-email/confirm-email.component.ts","webpack:///src/app/auth/confirm-email/confirm-email.component.html","webpack:///src/app/auth/auth.component.ts","webpack:///src/app/auth/auth.component.html","webpack:///src/app/auth/forgot-password/forgot-password.component.ts","webpack:///src/app/auth/forgot-password/forgot-password.component.html","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/reset-password/reset-password.component.ts","webpack:///src/app/auth/reset-password/reset-password.component.html"],"names":["MyErrorStateMatcher","control","form","invalidCtrl","invalid","parent","dirty","touched","invalidParent","RegistrationComponent","router","authService","formBuilder","toastrService","userValidate","matcher","required","email","group","password","minLength","confpassword","validator","checkPasswords","user","userName","value","register","subscribe","data","success","console","log","navigate","errors","errorMessage","forEach","item","Promise","resolve","reject","getErrorMessageEmail","get","getErrorMessagePassw","pass","controls","confirmPass","notSame","onSubmit","selector","templateUrl","styleUrls","authRoutes","path","component","children","canActivate","AuthRoutingModule","forChild","imports","exports","ConfirmEmailComponent","activatedRoute","load","queryParams","queryParam","warning","model","userId","code","confirm","confirmEmail","res","message","buttonColor","error","AuthComponent","ForgotPasswordComponent","logout","forgotUserPassword","forgotPassword","saveForgotPasswordToken","AuthModule","declarations","LoginComponent","isLoggedIn","hide","login","saveToken","saveUser","ResetPasswordComponent","resetUserPassword","confirmPassword","resetPassword"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormBuilder, FormGroupDirective, NgForm } from '@angular/forms';\r\n\r\nimport { User } from 'src/app/shared/models/user-role/user.model';\r\nimport { Router } from '@angular/router';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty && control.touched);\r\n    const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty && control.touched);\r\n\r\n    return (invalidCtrl || invalidParent);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  user: User;\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    private formBuilder: FormBuilder,\r\n    private toastrService: ToastrService,\r\n    private userValidate: UserValidateService\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.form = new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'passwords': this.formBuilder.group(\r\n        {\r\n          password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\r\n          confpassword: new FormControl(null)\r\n        }, { validator: this.checkPasswords }),\r\n      'userName': new FormControl(null, Validators.required),\r\n      'agree': new FormControl(null, Validators.required)\r\n    });\r\n\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.user =\r\n    {\r\n      userName: this.form.value['userName'],\r\n      password: this.form.value['passwords']['password'],\r\n      email: this.form.value['email']\r\n    };\r\n\r\n    this.authService.register(this.user).subscribe(data => {\r\n      this.toastrService.success(`Register successful, check your email`);\r\n      console.log(`Registered ${this.user.userName}, Ok!`)\r\n      this.router.navigate(['/auth/login']);\r\n    });\r\n  }\r\n\r\n  errorsResponse(errors: Array<object>) {\r\n    let errorMessage = '';\r\n    errors.forEach(item => {\r\n      errorMessage += `${item['description']} `;\r\n    });\r\n    return errorMessage;\r\n  }\r\n\r\n  forbiddenEmails(control: FormControl): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      // this.usersService.getUserByEmail(control.value)\r\n      //   .subscribe((user: User) => {\r\n      //     if(user) {\r\n      //       resolve({forbiddenEmail: true})\r\n      //     } else {\r\n      //       resolve(null)\r\n      //     }\r\n      //   });\r\n    })\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    return this.userValidate.getErrorMessageEmail(this.form.get('email'));\r\n  }\r\n  // if(this.form.get('email').hasError('forbiddenEmail')){\r\n  //   return 'Данный email уже зарегестрирован';\r\n  // }\r\n\r\n  getErrorMessagePassw() {\r\n    return this.userValidate.getErrorMessagePassw(this.form.get('passwords').get('password'));\r\n  }\r\n\r\n  checkPasswords(group: FormGroup) { // here we have the 'passwords' group\r\n    let pass = group.controls.password.value;\r\n    let confirmPass = group.controls.confpassword.value;\r\n\r\n    return pass === confirmPass ? null : { notSame: true }\r\n  }\r\n}\r\n","<p class=\"text-xs-center\">Регистрация для получения доступа</p>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите email</mat-label>\r\n      <input matInput placeholder=\"example@example.com\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div formGroupName=\"passwords\">\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите пароль</mat-label>\r\n      <input \r\n      matInput \r\n      formControlName=\"password\" \r\n      type=\"password\"\r\n      required\r\n      >\r\n      <mat-error *ngIf=\"form.get('passwords').invalid\r\n                        && form.get('passwords').get('password').touched\"\r\n        >{{getErrorMessagePassw()}}\r\n      </mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Повторите пароль</mat-label>\r\n      <input \r\n      matInput \r\n      formControlName=\"confpassword\" \r\n      type=\"password\"      \r\n      [errorStateMatcher]=\"matcher\"\r\n      required\r\n      >\r\n      <mat-error \r\n      *ngIf=\"form.get('passwords').hasError('notSame') \r\n             && form.get('passwords').get('confpassword').touched\"\r\n      >Пароли должны совпадать</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"example-container\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Имя</mat-label>\r\n    <input matInput placeholder=\"example@example.com\" formControlName=\"userName\" required>\r\n    <mat-error *ngIf=\"form.get('userName').invalid\">Введите имя</mat-error>\r\n  </mat-form-field>\r\n</div>\r\n  \r\n  <section class=\"example-section\">\r\n    <mat-checkbox\r\n     class=\"example-margin\"\r\n     formControlName=\"agree\"\r\n     required\r\n     >Согласен с правилами\r\n    </mat-checkbox>\r\n  </section>\r\n\r\n  <div class=\"form-group\">\r\n    <button \r\n    type=\"submit\" \r\n    class=\"submit_button\" \r\n    mat-raised-button color=\"primary\" \r\n    [disabled]=\"form.invalid\"\r\n    >Зарегистрироваться\r\n  </button>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Есть аккаунт? <button [routerLink]=\"'/auth/login'\" mat-flat-button color=\"accent\">Войти!</button>\r\n    </p>\r\n  </div>\r\n</form>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { RegistrationComponent } from \"./registration/registration.component\";\r\nimport { AuthComponent } from \"./auth.component\";\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\nimport { ConfirmEmailComponent } from './confirm-email/confirm-email.component';\r\nimport { LoggedInGuard } from '../shared/services/guards/loggedIn-guard.service';\r\n\r\nconst authRoutes: Routes = [    \r\n    { path: '', component: AuthComponent, children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'registration', component: RegistrationComponent },\r\n            { path: 'forgotpassword', component: ForgotPasswordComponent },\r\n            { path: 'resetpassword', component: ResetPasswordComponent },\r\n            { path: 'confirmemail', component: ConfirmEmailComponent }\r\n        ], canActivate: [LoggedInGuard] }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(authRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from 'src/app/shared/services/auth.service';\n\n@Component({\n  selector: 'confirm-email',\n  templateUrl: './confirm-email.component.html',\n  styleUrls: ['./confirm-email.component.css']\n})\nexport class ConfirmEmailComponent implements OnInit {\n\n  load = false;\n  message: string;\n  buttonColor: string;\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private toastrService: ToastrService,\n    private activatedRoute: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.activatedRoute.queryParams.subscribe(\n      (queryParam: any) => {\n        if(queryParam['code'] == null || queryParam['userId'] == null){\n          this.toastrService.warning(\"Чтобы подтвердить email перейдите по ссылке в письме\");\n          this.router.navigate(['/auth/login']);          \n        }\n        else {\n          let model = {\n            userId: queryParam['userId'],\n            code: queryParam['code']\n          }\n          this.confirm(model);\n        }        \n      });      \n  }\n\n  private confirm(model) {    \n    this.authService.confirmEmail(model).subscribe(res => {\n      this.message = \"Почта подтверждена успешно. Теперь Вы можете войти в систему.\";\n      this.buttonColor = \"primary\";\n      this.load = true;\n    }, error =>{\n      console.log(error)\n      this.message = \"При подтверждении пароля вознилка ошибка.\";\n      this.buttonColor = \"warn\";\n      this.load = true;\n    });\n  }\n\n}\n","<div class=\"form-group\" *ngIf=\"load\">\n    <p class=\"text-muted text-xs-center\">\n        {{ message }} <button [routerLink]=\"'/auth/login'\" mat-flat-button\n            color=\"{{buttonColor}}\">Войти!</button>\n    </p>\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'wfm-auth',\r\n    templateUrl: './auth.component.html',\r\n    styleUrls: ['./auth.component.css']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit() {\r\n    }\r\n}","<div class=\"auth-container\">\r\n  <div class=\"auth-card\">\r\n    <header>\r\n      <h1>\r\n        Alleutina Shop\r\n      </h1>\r\n    </header>\r\n    <div>\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { ForgotUserPassword } from 'src/app/shared/models/auth/forgotUserPassword.model';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\n\n@Component({\n  selector: 'forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotUserPassword: ForgotUserPassword;\n  email = new FormControl(null, [Validators.required, Validators.email]);\n  constructor(\n    private router: Router,\n    private toastrService: ToastrService,\n    private userValidate: UserValidateService,\n    private authService: AuthService\n  ) {\n    authService.logout();\n   }\n\n  ngOnInit() {}\n\n  onSubmit() {\n    this.forgotUserPassword = {\n      email: this.email.value\n    };\n    this.authService.forgotPassword(this.forgotUserPassword).subscribe(data => {\n      this.authService.saveForgotPasswordToken(data[\"token\"]);\n      this.toastrService.success(`Для сброса пароля перейдите по ссылке в письме,\n         отправленном на ваш Email ${this.email.value}`);\n      this.router.navigate(['/auth/login']);\n    });\n  }\n\n  getErrorMessageEmail() {\n    return this.userValidate.getErrorMessageEmail(this.email);\n  }\n\n}\n","<h3>Забыли пароль?</h3>\n<form (ngSubmit)=\"onSubmit()\">\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Введите email</mat-label>\n        <input matInput placeholder=\"pat@example.com\" [formControl]=\"email\" required>\n        <mat-error *ngIf=\"email.invalid\">{{getErrorMessageEmail()}}</mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group\">\n      <button [routerLink]=\"'/auth/login'\" \n              mat-flat-button \n              color=\"accent\"\n              >Назад к логину\n      </button>\n      <button \n          type=\"submit\"\n          class=\"submit_button\" \n          mat-raised-button color=\"primary\" \n          [disabled]=\"email.invalid\"\n          >Отправить\n      </button>\n    </div>\n</form>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from '../material/material.module';\r\n\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { ConfirmEmailComponent } from './confirm-email/confirm-email.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        RegistrationComponent,\r\n        AuthComponent,\r\n        ForgotPasswordComponent,\r\n        ResetPasswordComponent,\r\n        ConfirmEmailComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        AuthRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class AuthModule {}","\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  name: string;\r\n  isLoggedIn: boolean = false;\r\n  hide = true;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastrService: ToastrService,\r\n    private userValidate: UserValidateService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.form = new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'password': new FormControl(null, [Validators.required, Validators.minLength(6)])\r\n    })\r\n  }\r\n  \r\n  onSubmit() {\r\n    this.authService.login(this.form.value)\r\n      .subscribe(data => {\r\n        this.toastrService.success(`Loggin successful`);\r\n        this.authService.saveToken(data[\"token\"]);\r\n        this.authService.saveUser(data[\"userName\"], data[\"email\"], data['userRoles']);\r\n        this.router.navigate(['/admin-panel/products']);\r\n      });\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    return this.userValidate.getErrorMessageEmail(this.form.get('email'));\r\n}\r\n\r\ngetErrorMessagePassw() {\r\n  return this.userValidate.getErrorMessagePassw(this.form.get('password'));\r\n}\r\n}\r\n","<p class=\"text-xs-center\">Войдите для работы</p>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите email</mat-label>\r\n      <input matInput placeholder=\"pat@example.com\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите пароль</mat-label>\r\n      <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\">\r\n      <mat-error *ngIf=\"form.get('password').invalid\">{{getErrorMessagePassw()}}</mat-error>\r\n      <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\r\n        [attr.aria-pressed]=\"hide\">\r\n        <mat-icon>{{hide ? \"visibility_off\" : 'visibility'}}</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <a [routerLink]=\"'/auth/forgotpassword'\" style=\"margin-right: 10px;\">Забыли пароль?</a>\r\n    <button type=\"submit\" class=\"submit_button\" mat-raised-button color=\"primary\" [disabled]=\"form.invalid\">Войти</button>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Нет аккаунта? <button [routerLink]=\"'/auth/registration'\" mat-flat-button color=\"accent\">Зарегистрироваться!</button>\r\n    </p>\r\n  </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\nimport { ResetUserPassword } from 'src/app/shared/models/auth/resetUserPassword.model';\nimport { MyErrorStateMatcher } from '../registration/registration.component';\nimport { AuthService } from 'src/app/shared/services/auth.service';\n\n@Component({\n  selector: 'reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  form: FormGroup;\n  code: string;\n  resetUserPassword: ResetUserPassword;\n  matcher = new MyErrorStateMatcher();\n\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private toastrService: ToastrService,\n    private userValidate: UserValidateService,\n    private authService: AuthService,\n    private activatedRoute: ActivatedRoute\n    ) { \n      activatedRoute.queryParams.subscribe(\n        (queryParam: any) => {\n          if(queryParam['code'] == null){\n            this.toastrService.warning(\"Code is null\")\n            this.router.navigate(['/auth/login'])\n          }\n            this.code = queryParam['code'];\n        }\n    );\n    }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      'email': new FormControl(null, [Validators.required, Validators.email]),\n      'passwords': this.formBuilder.group(\n        {\n          password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\n          confpassword: new FormControl(null)\n        }, { validator: this.checkPasswords })\n    });\n  }\n\n  onSubmit() {\n    this.resetUserPassword =\n    {\n      confirmPassword: this.form.value['passwords']['confpassword'],\n      password: this.form.value['passwords']['password'],\n      email: this.form.value['email'],\n      code: this.code\n    };\n    \n    this.authService.resetPassword(this.resetUserPassword).subscribe(data => {\n      this.toastrService.success(`Ваш пароль сброшен.`);\n      this.router.navigate(['/auth/login']);\n    });\n  }\n\n  getErrorMessageEmail() {\n    return this.userValidate.getErrorMessageEmail(this.form.get('email'));\n  }\n\n  getErrorMessagePassw() {\n    return this.userValidate.getErrorMessagePassw(this.form.get('passwords').get('password'));\n  }\n\n  checkPasswords(group: FormGroup) { // here we have the 'passwords' group\n    let pass = group.controls.password.value;\n    let confirmPass = group.controls.confpassword.value;\n\n    return pass === confirmPass ? null : { notSame: true }\n  }\n}\n","<h3>Форма для сброса пароля</h3>\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n\n    <div class=\"example-container\">\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Введите email</mat-label>\n          <input \n                matInput \n                placeholder=\"example@example.com\" \n                formControlName=\"email\" \n                required/>\n          <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\n        </mat-form-field>\n    </div>\n\n    <div formGroupName=\"passwords\">\n        <div class=\"example-container\">\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Введите пароль</mat-label>\n            <input \n            matInput \n            formControlName=\"password\" \n            type=\"password\"\n            required/>\n            <mat-error *ngIf=\"form.get('passwords').invalid\n                              && form.get('passwords').get('password').touched\"\n              >{{getErrorMessagePassw()}}\n            </mat-error>\n          </mat-form-field>\n        </div>\n      \n        <div class=\"example-container\">\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Повторите пароль</mat-label>\n            <input \n            matInput \n            formControlName=\"confpassword\" \n            type=\"password\"      \n            [errorStateMatcher]=\"matcher\"\n            required/>\n            <mat-error \n            *ngIf=\"form.get('passwords').hasError('notSame') \n                   && form.get('passwords').get('confpassword').touched\"\n            >Пароли должны совпадать</mat-error>\n          </mat-form-field>\n        </div>\n    </div>\n\n    <div class=\"form-group\">\n        <button \n        type=\"submit\" \n        class=\"submit_button\" \n        mat-raised-button color=\"primary\" \n        [disabled]=\"form.invalid\"\n        >Сбросить\n      </button>\n    </div>\n</form>"]}