{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.component.ts","webpack:///src/app/auth/auth.component.html","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html","webpack:///src/app/auth/registration/registration.component.ts","webpack:///src/app/auth/registration/registration.component.html","webpack:///src/app/shared/models/message.model.ts"],"names":["authRoutes","path","component","children","AuthRoutingModule","forChild","imports","exports","AuthComponent","router","selector","templateUrl","styleUrls","AuthModule","declarations","LoginComponent","authService","route","tokenStorage","isLoggedIn","hide","message","queryParams","subscribe","params","showMessage","text","type","form","required","email","minLength","login1","value","response","token","saveToken","saveUser","login","name","getUser","console","log","navigate","error","get","hasError","window","setTimeout","onSubmit","MyErrorStateMatcher","control","invalidCtrl","invalid","parent","dirty","invalidParent","RegistrationComponent","usersService","formBuilder","matcher","group","password","confpassword","validator","checkPasswords","user","role","createUser","nowCanLoggin","Promise","resolve","reject","pass","controls","confirmPass","notSame","Message"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { RegistrationComponent } from \"./registration/registration.component\";\r\nimport { AuthComponent } from \"./auth.component\";\r\n\r\nconst authRoutes: Routes = [    \r\n    { path: '', component: AuthComponent, children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'registration', component: RegistrationComponent }\r\n        ] }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(authRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'wfm-auth',\r\n    templateUrl: './auth.component.html',\r\n    styleUrls: ['./auth.component.css']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n    constructor(private router: Router) {}\r\n\r\n    ngOnInit() {\r\n    }\r\n}","<div class=\"auth-container\">\r\n  <div class=\"auth-card\">\r\n    <header>\r\n      <h1>\r\n        Alleutina Shop\r\n      </h1>\r\n    </header>\r\n    <div>\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from '../material/material.module';\r\n\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        RegistrationComponent,\r\n        AuthComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        AuthRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class AuthModule {}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\n\r\n\r\nimport { Message } from 'src/app/shared/models/message.model';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { TokenStorageService } from 'src/app/shared/services/token-storage.service';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  message: Message;\r\n  name: string;\r\n  isLoggedIn: boolean = false;\r\n  hide = true;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private tokenStorage: TokenStorageService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.message = new Message('', '');\r\n\r\n    this.route.queryParams\r\n      .subscribe((params: Params) => {\r\n        if (params['nowCanLoggin']) {\r\n          this.showMessage({\r\n            text: 'Теперь вы можете зайти в систему',\r\n            type: 'success'\r\n          });\r\n        }\r\n      });\r\n\r\n    this.form = new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'password': new FormControl(null, [Validators.required, Validators.minLength(6)])\r\n    })\r\n  }\r\n  \r\n  onSubmit() {\r\n    this.authService.login1(this.form.value)\r\n      .subscribe(response => {\r\n        const token = (<any>response).token;\r\n\r\n        this.tokenStorage.saveToken(token);\r\n        this.tokenStorage.saveUser(response);\r\n\r\n        this.authService.login()\r\n        this.name = this.tokenStorage.getUser().name;\r\n        this.message.text = '';\r\n        console.log(`Loggin successful, ${name}`);\r\n\r\n        this.router.navigate(['/admin-panel']);\r\n      }, error => {\r\n        this.showMessage({\r\n          text: 'Введен не правильный логин или пароль',\r\n          type: 'danger'\r\n        });\r\n      });\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    if (this.form.get('email').hasError('required')) {\r\n      return 'Не оставлять пустым!';\r\n    }\r\n    return this.form.get('email').hasError('email') ? 'Введите корректный email' : '';\r\n  }\r\n\r\n  getErrorMessagePassv() {\r\n    if (this.form.get('password').hasError('required')) {\r\n      return 'Не оставлять пустым!';\r\n    }\r\n    return this.form.get('password').hasError('minlength') ? 'Пароль должен быть больше 5 символов' : '';\r\n  }\r\n\r\n  showMessage(message: Message) {\r\n    this.message = message;\r\n    window.setTimeout(() => {\r\n      this.message.text = '';\r\n    }, 4000);\r\n  }\r\n}\r\n","<p class=\"text-xs-center\">Войдите для работы</p>\r\n<div class=\"message_Info message_Info-{{message.type}}\" *ngIf=\"message.text\" >{{ message.text }}</div>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите email</mat-label>\r\n      <input matInput placeholder=\"pat@example.com\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите пароль</mat-label>\r\n      <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\">\r\n      <mat-error *ngIf=\"form.get('password').invalid\">{{getErrorMessagePassv()}}</mat-error>\r\n      <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\r\n        [attr.aria-pressed]=\"hide\">\r\n        <mat-icon>{{hide ? \"visibility_off\" : 'visibility'}}</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <button type=\"submit\" class=\"submit_button\" mat-raised-button color=\"primary\" [disabled]=\"form.invalid\">Войти</button>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Нет аккаунта? <button [routerLink]=\"'/auth/registration'\" mat-flat-button color=\"accent\">Зарегистрироваться!</button>\r\n    </p>\r\n  </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidatorFn, AbstractControl, FormBuilder, FormGroupDirective, NgForm } from '@angular/forms';\r\n\r\nimport { User } from 'src/app/shared/models/user.model';\r\nimport { UsersService } from 'src/app/shared/services/users.service';\r\nimport { Router } from '@angular/router';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\r\n    const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty);\r\n\r\n    return (invalidCtrl || invalidParent);\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  user: User;\r\n  hide = true;\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private usersService: UsersService,\r\n        private formBuilder: FormBuilder\r\n  ) {}\r\n  \r\n\r\n  ngOnInit() {   \r\n    this.form =new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'passwords': this.formBuilder.group(\r\n        {\r\n          password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\r\n          confpassword: new FormControl(null)\r\n        }, {validator: this.checkPasswords }),\r\n      'name': new FormControl(null, Validators.required),\r\n      'agree': new FormControl(null, Validators.required)\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  onSubmit(){\r\n    console.log(this.form)\r\n    this.user =\r\n    {\r\n      name: this.form.value['name'],\r\n      password: this.form.value['passwords']['password'],\r\n      email: this.form.value['email'],\r\n      role: \"User\"\r\n    };\r\n    \r\n      this.usersService.createUser(this.user)\r\n      .subscribe((user: User) => {\r\n        this.router.navigate(['/auth/login'], {\r\n          queryParams: {\r\n            nowCanLoggin: true\r\n          }\r\n        });\r\n   });\r\n  }\r\n\r\n  forbiddenEmails(control: FormControl) : Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      // this.usersService.getUserByEmail(control.value)\r\n      //   .subscribe((user: User) => {\r\n      //     if(user) {\r\n      //       resolve({forbiddenEmail: true})\r\n      //     } else {\r\n      //       resolve(null)\r\n      //     }\r\n      //   });\r\n    })\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    if (this.form.get('email').hasError('required')) {\r\n      return 'Не оставлять пустым!';\r\n    }\r\n    if(this.form.get('email').hasError('forbiddenEmail')){\r\n      return 'Данный email уже зарегестрирован';\r\n    }\r\n    return this.form.get('email').hasError('email') ? 'Введите корректный email' : '';\r\n  }\r\n\r\n  getErrorMessageName() {\r\n    return this.form.get('name').hasError('required') ? 'Введите имя' : '';\r\n  }\r\n\r\n  getErrorMessagePassv() {\r\n    if (this.form.get('passwords').get('password').hasError('required')) {\r\n      return 'Не оставлять пустым!';\r\n    }\r\n    return this.form.get('passwords').get('password').hasError('minlength') ? 'Пароль должен быть больше 5 символов' : '';\r\n  }\r\n  getErrorMessagePassvConf() {\r\n    return this.form.get('passwords').hasError('notSame') ? 'Пароли должны совпадать' : '';\r\n  }\r\n\r\n  checkPasswords(group: FormGroup) { // here we have the 'passwords' group\r\n  let pass = group.controls.password.value;\r\n  let confirmPass = group.controls.confpassword.value;\r\n\r\n  return pass === confirmPass ? null : { notSame: true }     \r\n}\r\n\r\n  // private passwordsAreEqual(): ValidatorFn {\r\n  //   return (group: FormGroup): { [key: string]: any } => {\r\n  //     if (!(group.dirty || group.touched) || group.get('password').value === group.get('confpassword').value) {\r\n  //       return null;\r\n  //     }\r\n  //     return {\r\n  //       custom: 'Passwords are not equal.'\r\n  //     };\r\n  //   };\r\n  // }\r\n  \r\n}\r\n","<p class=\"text-xs-center\">Регистрация для получения доступа</p>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите email</mat-label>\r\n      <input matInput placeholder=\"example@example.com\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div formGroupName=\"passwords\">\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите пароль</mat-label>\r\n      <input \r\n      matInput \r\n      formControlName=\"password\" \r\n      type=\"password\"\r\n      required\r\n      >\r\n      <mat-error *ngIf=\"form.get('passwords').invalid && form.get('passwords').get('password').touched\">{{getErrorMessagePassv()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Повторите пароль</mat-label>\r\n      <input \r\n      matInput \r\n      formControlName=\"confpassword\" \r\n      type=\"password\"\r\n      required\r\n      >\r\n      <mat-error \r\n      *ngIf=\"form.get('passwords').hasError('notSame') && form.get('passwords').get('confpassword').touched\"\r\n      [errorStateMatcher]=\"matcher\"\r\n      >{{getErrorMessagePassvConf()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n</div>\r\n\r\n \r\n  <!-- <div formGroupName=\"passwords\">\r\n  <div \r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('passwords').get('password').invalid && form.get('passwords').get('password').touched }\"\r\n   >\r\n    <label for=\"password\">Пароль</label>\r\n    <input \r\n      type=\"password\" \r\n      class=\"form-control underlined\" \r\n      id=\"passwordw\"\r\n      formControlName=\"password\" \r\n      placeholder=\"Введите пароль\"\r\n      required\r\n      >\r\n      <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('passwords').get('password').invalid && form.get('passwords').get('password').touched\"\r\n      >\r\n      <span *ngIf=\"form.get('passwords').get('password')['errors']['required']\">Пароль не должен быть пустым.</span>\r\n      <span \r\n        *ngIf=\"form.get('passwords').get('password')['errors']['minlength']\"\r\n      >Пароль должен быть не меньше {{ form.get('passwords').get('password')['errors']['minlength']['requiredLength'] }} символов.\r\n    </span>\r\n    </span>\r\n  </div>\r\n  \r\n  <div \r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('passwords').invalid && form.get('passwords').get('confpassword').touched }\"\r\n   >\r\n    <label for=\"confpassword\">Повторите пароль</label>\r\n    <input \r\n      type=\"password\" \r\n      class=\"form-control underlined\" \r\n      id=\"confpasswordw\"\r\n      formControlName=\"confpassword\" \r\n      placeholder=\"Повторите пароль\"\r\n      required\r\n      >\r\n      <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('passwords').invalid && form.get('passwords').get('confpassword').touched\"\r\n      >Пароли должны совпадать.\r\n    </span>\r\n  </div>\r\n</div> -->\r\n\r\n<div class=\"example-container\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Имя</mat-label>\r\n    <input matInput placeholder=\"example@example.com\" formControlName=\"name\" required>\r\n    <mat-error *ngIf=\"form.get('name').invalid\">{{getErrorMessageName()}}</mat-error>\r\n  </mat-form-field>\r\n</div>\r\n  \r\n  <section class=\"example-section\">\r\n    <mat-checkbox\r\n     class=\"example-margin\"\r\n     formControlName=\"agree\"\r\n     required\r\n     >Согласен с правилами\r\n    </mat-checkbox>\r\n  </section>\r\n\r\n  <div class=\"form-group\">\r\n    <button \r\n    type=\"submit\" \r\n    class=\"submit_button\" \r\n    mat-raised-button color=\"primary\" \r\n    >Зарегистрироваться\r\n  </button>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Есть аккаунт? <button [routerLink]=\"'/auth/login'\" mat-flat-button color=\"accent\">Войти!</button>\r\n    </p>\r\n  </div>\r\n</form>","export class Message {\r\n    constructor(\r\n        public type: string,\r\n        public text: string\r\n    ) {}\r\n}"]}