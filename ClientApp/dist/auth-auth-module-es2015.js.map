{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.component.ts","./src/app/auth/auth.component.html","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/registration/registration.component.ts","./src/app/auth/registration/registration.component.html","./src/app/shared/models/message.model.ts"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { RegistrationComponent } from \"./registration/registration.component\";\r\nimport { AuthComponent } from \"./auth.component\";\r\n\r\nconst authRoutes: Routes = [    \r\n    { path: '', component: AuthComponent, children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'registration', component: RegistrationComponent }\r\n        ] }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(authRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'wfm-auth',\r\n    templateUrl: './auth.component.html',\r\n    styleUrls: ['./auth.component.css']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n    constructor(private router: Router) {}\r\n\r\n    ngOnInit() {\r\n    }\r\n}","<div class=\"auth-container\">\r\n  <div class=\"auth-card\">\r\n    <header>\r\n      <h1>\r\n        Alleutina Shop\r\n      </h1>\r\n    </header>\r\n    <div>\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from '../material/material.module';\r\n\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        RegistrationComponent,\r\n        AuthComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        AuthRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class AuthModule {}","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute, Params } from '@angular/router';\r\n\r\n\r\nimport { Message } from 'src/app/shared/models/message.model';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { TokenStorageService } from 'src/app/shared/services/token-storage.service';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  message: Message;\r\n  name: string;\r\n  isLoggedIn: boolean = false;\r\n  hide = true;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private tokenStorage: TokenStorageService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.message = new Message('', '');\r\n\r\n    this.route.queryParams\r\n      .subscribe((params: Params) => {\r\n        if (params['nowCanLoggin']) {\r\n          this.showMessage({\r\n            text: 'Теперь вы можете зайти в систему',\r\n            type: 'success'\r\n          });\r\n        }\r\n      });\r\n\r\n    this.form = new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'password': new FormControl(null, [Validators.required, Validators.minLength(6)])\r\n    })\r\n  }\r\n  \r\n  onSubmit() {\r\n    this.authService.login1(this.form.value)\r\n      .subscribe(response => {\r\n        const token = (<any>response).token;\r\n\r\n        this.tokenStorage.saveToken(token);\r\n        this.tokenStorage.saveUser(response);\r\n\r\n        this.authService.login()\r\n        this.name = this.tokenStorage.getUser().name;\r\n        this.message.text = '';\r\n        console.log(`Loggin successful, ${name}`);\r\n\r\n        this.router.navigate(['/admin-panel']);\r\n      }, error => {\r\n        this.showMessage({\r\n          text: 'Введен не правильный логин или пароль',\r\n          type: 'danger'\r\n        });\r\n      });\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    if (this.form.get('email').hasError('required')) {\r\n      return 'Не оставлять пустым!';\r\n    }\r\n    return this.form.get('email').hasError('email') ? 'Введите корректный email' : '';\r\n  }\r\n\r\n  getErrorMessagePassv() {\r\n    if (this.form.get('password').hasError('required')) {\r\n      return 'Не оставлять пустым!';\r\n    }\r\n    return this.form.get('password').hasError('minlength') ? 'Пароль должен быть больше 5 символов' : '';\r\n  }\r\n\r\n  showMessage(message: Message) {\r\n    this.message = message;\r\n    window.setTimeout(() => {\r\n      this.message.text = '';\r\n    }, 4000);\r\n  }\r\n}\r\n","<p class=\"text-xs-center\">Войдите для работы</p>\r\n<div class=\"message_Info message_Info-{{message.type}}\" *ngIf=\"message.text\" >{{ message.text }}</div>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите email</mat-label>\r\n      <input matInput placeholder=\"pat@example.com\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите пароль</mat-label>\r\n      <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\">\r\n      <mat-error *ngIf=\"form.get('password').invalid\">{{getErrorMessagePassv()}}</mat-error>\r\n      <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\r\n        [attr.aria-pressed]=\"hide\">\r\n        <mat-icon>{{hide ? \"visibility_off\" : 'visibility'}}</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <button type=\"submit\" class=\"submit_button\" mat-raised-button color=\"primary\" [disabled]=\"form.invalid\">Войти</button>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Нет аккаунта? <button [routerLink]=\"'/auth/registration'\" mat-flat-button color=\"accent\">Зарегистрироваться!</button>\r\n    </p>\r\n  </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, ValidatorFn, AbstractControl, FormBuilder, FormGroupDirective, NgForm } from '@angular/forms';\r\n\r\nimport { User } from 'src/app/shared/models/user.model';\r\nimport { UsersService } from 'src/app/shared/services/users.service';\r\nimport { Router } from '@angular/router';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty);\r\n    const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty);\r\n\r\n    return (invalidCtrl || invalidParent);\r\n  }\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  user: User;\r\n  hide = true;\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private usersService: UsersService,\r\n        private formBuilder: FormBuilder\r\n  ) {}\r\n  \r\n\r\n  ngOnInit() {   \r\n    this.form =new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'passwords': this.formBuilder.group(\r\n        {\r\n          password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\r\n          confpassword: new FormControl(null)\r\n        }, {validator: this.checkPasswords }),\r\n      'name': new FormControl(null, Validators.required),\r\n      'agree': new FormControl(null, Validators.required)\r\n    });\r\n    \r\n  }\r\n\r\n\r\n  onSubmit(){\r\n    console.log(this.form)\r\n    this.user =\r\n    {\r\n      name: this.form.value['name'],\r\n      password: this.form.value['passwords']['password'],\r\n      email: this.form.value['email'],\r\n      role: \"User\"\r\n    };\r\n    \r\n      this.usersService.createUser(this.user)\r\n      .subscribe((user: User) => {\r\n        this.router.navigate(['/auth/login'], {\r\n          queryParams: {\r\n            nowCanLoggin: true\r\n          }\r\n        });\r\n   });\r\n  }\r\n\r\n  forbiddenEmails(control: FormControl) : Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      // this.usersService.getUserByEmail(control.value)\r\n      //   .subscribe((user: User) => {\r\n      //     if(user) {\r\n      //       resolve({forbiddenEmail: true})\r\n      //     } else {\r\n      //       resolve(null)\r\n      //     }\r\n      //   });\r\n    })\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    if (this.form.get('email').hasError('required')) {\r\n      return 'Не оставлять пустым!';\r\n    }\r\n    if(this.form.get('email').hasError('forbiddenEmail')){\r\n      return 'Данный email уже зарегестрирован';\r\n    }\r\n    return this.form.get('email').hasError('email') ? 'Введите корректный email' : '';\r\n  }\r\n\r\n  getErrorMessageName() {\r\n    return this.form.get('name').hasError('required') ? 'Введите имя' : '';\r\n  }\r\n\r\n  getErrorMessagePassv() {\r\n    if (this.form.get('passwords').get('password').hasError('required')) {\r\n      return 'Не оставлять пустым!';\r\n    }\r\n    return this.form.get('passwords').get('password').hasError('minlength') ? 'Пароль должен быть больше 5 символов' : '';\r\n  }\r\n  getErrorMessagePassvConf() {\r\n    return this.form.get('passwords').hasError('notSame') ? 'Пароли должны совпадать' : '';\r\n  }\r\n\r\n  checkPasswords(group: FormGroup) { // here we have the 'passwords' group\r\n  let pass = group.controls.password.value;\r\n  let confirmPass = group.controls.confpassword.value;\r\n\r\n  return pass === confirmPass ? null : { notSame: true }     \r\n}\r\n\r\n  // private passwordsAreEqual(): ValidatorFn {\r\n  //   return (group: FormGroup): { [key: string]: any } => {\r\n  //     if (!(group.dirty || group.touched) || group.get('password').value === group.get('confpassword').value) {\r\n  //       return null;\r\n  //     }\r\n  //     return {\r\n  //       custom: 'Passwords are not equal.'\r\n  //     };\r\n  //   };\r\n  // }\r\n  \r\n}\r\n","<p class=\"text-xs-center\">Регистрация для получения доступа</p>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите email</mat-label>\r\n      <input matInput placeholder=\"example@example.com\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div formGroupName=\"passwords\">\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите пароль</mat-label>\r\n      <input \r\n      matInput \r\n      formControlName=\"password\" \r\n      type=\"password\"\r\n      required\r\n      >\r\n      <mat-error *ngIf=\"form.get('passwords').invalid && form.get('passwords').get('password').touched\">{{getErrorMessagePassv()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Повторите пароль</mat-label>\r\n      <input \r\n      matInput \r\n      formControlName=\"confpassword\" \r\n      type=\"password\"\r\n      required\r\n      >\r\n      <mat-error \r\n      *ngIf=\"form.get('passwords').hasError('notSame') && form.get('passwords').get('confpassword').touched\"\r\n      [errorStateMatcher]=\"matcher\"\r\n      >{{getErrorMessagePassvConf()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n</div>\r\n\r\n \r\n  <!-- <div formGroupName=\"passwords\">\r\n  <div \r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('passwords').get('password').invalid && form.get('passwords').get('password').touched }\"\r\n   >\r\n    <label for=\"password\">Пароль</label>\r\n    <input \r\n      type=\"password\" \r\n      class=\"form-control underlined\" \r\n      id=\"passwordw\"\r\n      formControlName=\"password\" \r\n      placeholder=\"Введите пароль\"\r\n      required\r\n      >\r\n      <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('passwords').get('password').invalid && form.get('passwords').get('password').touched\"\r\n      >\r\n      <span *ngIf=\"form.get('passwords').get('password')['errors']['required']\">Пароль не должен быть пустым.</span>\r\n      <span \r\n        *ngIf=\"form.get('passwords').get('password')['errors']['minlength']\"\r\n      >Пароль должен быть не меньше {{ form.get('passwords').get('password')['errors']['minlength']['requiredLength'] }} символов.\r\n    </span>\r\n    </span>\r\n  </div>\r\n  \r\n  <div \r\n   class=\"form-group\"\r\n   [ngClass]=\"{'has-error': form.get('passwords').invalid && form.get('passwords').get('confpassword').touched }\"\r\n   >\r\n    <label for=\"confpassword\">Повторите пароль</label>\r\n    <input \r\n      type=\"password\" \r\n      class=\"form-control underlined\" \r\n      id=\"confpasswordw\"\r\n      formControlName=\"confpassword\" \r\n      placeholder=\"Повторите пароль\"\r\n      required\r\n      >\r\n      <span \r\n      class=\"form-help-text\"\r\n      *ngIf=\"form.get('passwords').invalid && form.get('passwords').get('confpassword').touched\"\r\n      >Пароли должны совпадать.\r\n    </span>\r\n  </div>\r\n</div> -->\r\n\r\n<div class=\"example-container\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Имя</mat-label>\r\n    <input matInput placeholder=\"example@example.com\" formControlName=\"name\" required>\r\n    <mat-error *ngIf=\"form.get('name').invalid\">{{getErrorMessageName()}}</mat-error>\r\n  </mat-form-field>\r\n</div>\r\n  \r\n  <section class=\"example-section\">\r\n    <mat-checkbox\r\n     class=\"example-margin\"\r\n     formControlName=\"agree\"\r\n     required\r\n     >Согласен с правилами\r\n    </mat-checkbox>\r\n  </section>\r\n\r\n  <div class=\"form-group\">\r\n    <button \r\n    type=\"submit\" \r\n    class=\"submit_button\" \r\n    mat-raised-button color=\"primary\" \r\n    >Зарегистрироваться\r\n  </button>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Есть аккаунт? <button [routerLink]=\"'/auth/login'\" mat-flat-button color=\"accent\">Войти!</button>\r\n    </p>\r\n  </div>\r\n</form>","export class Message {\r\n    constructor(\r\n        public type: string,\r\n        public text: string\r\n    ) {}\r\n}"],"sourceRoot":"webpack:///"}