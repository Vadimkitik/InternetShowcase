{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.component.ts","./src/app/auth/auth.component.html","./src/app/auth/auth.module.ts","./src/app/auth/confirm-email/confirm-email.component.ts","./src/app/auth/confirm-email/confirm-email.component.html","./src/app/auth/forgot-password/forgot-password.component.ts","./src/app/auth/forgot-password/forgot-password.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/auth/registration/registration.component.ts","./src/app/auth/registration/registration.component.html","./src/app/auth/reset-password/reset-password.component.ts","./src/app/auth/reset-password/reset-password.component.html"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { RegistrationComponent } from \"./registration/registration.component\";\r\nimport { AuthComponent } from \"./auth.component\";\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\nimport { ConfirmEmailComponent } from './confirm-email/confirm-email.component';\r\nimport { LoggedInGuard } from '../shared/services/guards/loggedIn-guard.service';\r\n\r\nconst authRoutes: Routes = [    \r\n    { path: '', component: AuthComponent, children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'registration', component: RegistrationComponent },\r\n            { path: 'forgotpassword', component: ForgotPasswordComponent },\r\n            { path: 'resetpassword', component: ResetPasswordComponent },\r\n            { path: 'confirmemail', component: ConfirmEmailComponent }\r\n        ], canActivate: [LoggedInGuard] }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(authRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'wfm-auth',\r\n    templateUrl: './auth.component.html',\r\n    styleUrls: ['./auth.component.css']\r\n})\r\nexport class AuthComponent implements OnInit {\r\n\r\n    constructor() {}\r\n\r\n    ngOnInit() {\r\n    }\r\n}","<div class=\"auth-container\">\r\n  <div class=\"auth-card\">\r\n    <header>\r\n      <h1>\r\n        Alleutina Shop\r\n      </h1>\r\n    </header>\r\n    <div>\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialModule } from '../material/material.module';\r\n\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { ConfirmEmailComponent } from './confirm-email/confirm-email.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        RegistrationComponent,\r\n        AuthComponent,\r\n        ForgotPasswordComponent,\r\n        ResetPasswordComponent,\r\n        ConfirmEmailComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        MaterialModule,\r\n        AuthRoutingModule,\r\n        SharedModule\r\n    ]\r\n})\r\nexport class AuthModule {}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from 'src/app/shared/services/auth.service';\n\n@Component({\n  selector: 'confirm-email',\n  templateUrl: './confirm-email.component.html',\n  styleUrls: ['./confirm-email.component.css']\n})\nexport class ConfirmEmailComponent implements OnInit {\n\n  load = false;\n  message: string;\n  buttonColor: string;\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private toastrService: ToastrService,\n    private activatedRoute: ActivatedRoute\n  ) { }\n\n  ngOnInit() {\n    this.activatedRoute.queryParams.subscribe(\n      (queryParam: any) => {\n        if(queryParam['code'] == null || queryParam['userId'] == null){\n          this.toastrService.warning(\"Чтобы подтвердить email перейдите по ссылке в письме\");\n          this.router.navigate(['/auth/login']);          \n        }\n        else {\n          let model = {\n            userId: queryParam['userId'],\n            code: queryParam['code']\n          }\n          this.confirm(model);\n        }        \n      });      \n  }\n\n  private confirm(model) {    \n    this.authService.confirmEmail(model).subscribe(res => {\n      this.message = \"Почта подтверждена успешно. Теперь Вы можете войти в систему.\";\n      this.buttonColor = \"primary\";\n      this.load = true;\n    }, error =>{\n      console.log(error)\n      this.message = \"При подтверждении пароля вознилка ошибка.\";\n      this.buttonColor = \"warn\";\n      this.load = true;\n    });\n  }\n\n}\n","<div class=\"form-group\" *ngIf=\"load\">\n    <p class=\"text-muted text-xs-center\">\n        {{ message }} <button [routerLink]=\"'/auth/login'\" mat-flat-button\n            color=\"{{buttonColor}}\">Войти!</button>\n    </p>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { ForgotUserPassword } from 'src/app/shared/models/auth/forgotUserPassword.model';\nimport { AuthService } from 'src/app/shared/services/auth.service';\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\n\n@Component({\n  selector: 'forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotUserPassword: ForgotUserPassword;\n  email = new FormControl(null, [Validators.required, Validators.email]);\n  constructor(\n    private router: Router,\n    private toastrService: ToastrService,\n    private userValidate: UserValidateService,\n    private authService: AuthService\n  ) {\n    authService.logout();\n   }\n\n  ngOnInit() {}\n\n  onSubmit() {\n    this.forgotUserPassword = {\n      email: this.email.value\n    };\n    this.authService.forgotPassword(this.forgotUserPassword).subscribe(data => {\n      this.authService.saveForgotPasswordToken(data[\"token\"]);\n      this.toastrService.success(`Для сброса пароля перейдите по ссылке в письме,\n         отправленном на ваш Email ${this.email.value}`);\n      this.router.navigate(['/auth/login']);\n    });\n  }\n\n  getErrorMessageEmail() {\n    return this.userValidate.getErrorMessageEmail(this.email);\n  }\n\n}\n","<h3>Забыли пароль?</h3>\n<form (ngSubmit)=\"onSubmit()\">\n\n    <div class=\"example-container\">\n      <mat-form-field appearance=\"fill\">\n        <mat-label>Введите email</mat-label>\n        <input matInput placeholder=\"pat@example.com\" [formControl]=\"email\" required>\n        <mat-error *ngIf=\"email.invalid\">{{getErrorMessageEmail()}}</mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"form-group\">\n      <button [routerLink]=\"'/auth/login'\" \n              mat-flat-button \n              color=\"accent\"\n              >Назад к логину\n      </button>\n      <button \n          type=\"submit\"\n          class=\"submit_button\" \n          mat-raised-button color=\"primary\" \n          [disabled]=\"email.invalid\"\n          >Отправить\n      </button>\n    </div>\n</form>","\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\r\n\r\n@Component({\r\n  selector: 'login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  name: string;\r\n  isLoggedIn: boolean = false;\r\n  hide = true;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastrService: ToastrService,\r\n    private userValidate: UserValidateService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.form = new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'password': new FormControl(null, [Validators.required, Validators.minLength(6)])\r\n    })\r\n  }\r\n  \r\n  onSubmit() {\r\n    this.authService.login(this.form.value)\r\n      .subscribe(data => {\r\n        this.toastrService.success(`Loggin successful`);\r\n        this.authService.saveToken(data[\"token\"]);\r\n        this.authService.saveUser(data[\"userName\"], data[\"email\"], data['userRoles']);\r\n        this.router.navigate(['/admin-panel/products']);\r\n      });\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    return this.userValidate.getErrorMessageEmail(this.form.get('email'));\r\n}\r\n\r\ngetErrorMessagePassw() {\r\n  return this.userValidate.getErrorMessagePassw(this.form.get('password'));\r\n}\r\n}\r\n","<p class=\"text-xs-center\">Войдите для работы</p>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите email</mat-label>\r\n      <input matInput placeholder=\"pat@example.com\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите пароль</mat-label>\r\n      <input matInput formControlName=\"password\" [type]=\"hide ? 'password' : 'text'\">\r\n      <mat-error *ngIf=\"form.get('password').invalid\">{{getErrorMessagePassw()}}</mat-error>\r\n      <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\r\n        [attr.aria-pressed]=\"hide\">\r\n        <mat-icon>{{hide ? \"visibility_off\" : 'visibility'}}</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <a [routerLink]=\"'/auth/forgotpassword'\" style=\"margin-right: 10px;\">Забыли пароль?</a>\r\n    <button type=\"submit\" class=\"submit_button\" mat-raised-button color=\"primary\" [disabled]=\"form.invalid\">Войти</button>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Нет аккаунта? <button [routerLink]=\"'/auth/registration'\" mat-flat-button color=\"accent\">Зарегистрироваться!</button>\r\n    </p>\r\n  </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators, FormBuilder, FormGroupDirective, NgForm } from '@angular/forms';\r\n\r\nimport { User } from 'src/app/shared/models/user-role/user.model';\r\nimport { Router } from '@angular/router';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    const invalidCtrl = !!(control && control.invalid && control.parent.dirty && control.touched);\r\n    const invalidParent = !!(control && control.parent && control.parent.invalid && control.parent.dirty && control.touched);\r\n\r\n    return (invalidCtrl || invalidParent);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  user: User;\r\n  matcher = new MyErrorStateMatcher();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    private formBuilder: FormBuilder,\r\n    private toastrService: ToastrService,\r\n    private userValidate: UserValidateService\r\n  ) { }\r\n\r\n\r\n  ngOnInit() {\r\n    this.form = new FormGroup({\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'passwords': this.formBuilder.group(\r\n        {\r\n          password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\r\n          confpassword: new FormControl(null)\r\n        }, { validator: this.checkPasswords }),\r\n      'userName': new FormControl(null, Validators.required),\r\n      'agree': new FormControl(null, Validators.required)\r\n    });\r\n\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.user =\r\n    {\r\n      userName: this.form.value['userName'],\r\n      password: this.form.value['passwords']['password'],\r\n      email: this.form.value['email']\r\n    };\r\n\r\n    this.authService.register(this.user).subscribe(data => {\r\n      this.toastrService.success(`Register successful, check your email`);\r\n      console.log(`Registered ${this.user.userName}, Ok!`)\r\n      this.router.navigate(['/auth/login']);\r\n    });\r\n  }\r\n\r\n  errorsResponse(errors: Array<object>) {\r\n    let errorMessage = '';\r\n    errors.forEach(item => {\r\n      errorMessage += `${item['description']} `;\r\n    });\r\n    return errorMessage;\r\n  }\r\n\r\n  forbiddenEmails(control: FormControl): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      // this.usersService.getUserByEmail(control.value)\r\n      //   .subscribe((user: User) => {\r\n      //     if(user) {\r\n      //       resolve({forbiddenEmail: true})\r\n      //     } else {\r\n      //       resolve(null)\r\n      //     }\r\n      //   });\r\n    })\r\n  }\r\n\r\n  getErrorMessageEmail() {\r\n    return this.userValidate.getErrorMessageEmail(this.form.get('email'));\r\n  }\r\n  // if(this.form.get('email').hasError('forbiddenEmail')){\r\n  //   return 'Данный email уже зарегестрирован';\r\n  // }\r\n\r\n  getErrorMessagePassw() {\r\n    return this.userValidate.getErrorMessagePassw(this.form.get('passwords').get('password'));\r\n  }\r\n\r\n  checkPasswords(group: FormGroup) { // here we have the 'passwords' group\r\n    let pass = group.controls.password.value;\r\n    let confirmPass = group.controls.confpassword.value;\r\n\r\n    return pass === confirmPass ? null : { notSame: true }\r\n  }\r\n}\r\n","<p class=\"text-xs-center\">Регистрация для получения доступа</p>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите email</mat-label>\r\n      <input matInput placeholder=\"example@example.com\" formControlName=\"email\" required>\r\n      <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div formGroupName=\"passwords\">\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Введите пароль</mat-label>\r\n      <input \r\n      matInput \r\n      formControlName=\"password\" \r\n      type=\"password\"\r\n      required\r\n      >\r\n      <mat-error *ngIf=\"form.get('passwords').invalid\r\n                        && form.get('passwords').get('password').touched\"\r\n        >{{getErrorMessagePassw()}}\r\n      </mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <mat-form-field appearance=\"fill\">\r\n      <mat-label>Повторите пароль</mat-label>\r\n      <input \r\n      matInput \r\n      formControlName=\"confpassword\" \r\n      type=\"password\"      \r\n      [errorStateMatcher]=\"matcher\"\r\n      required\r\n      >\r\n      <mat-error \r\n      *ngIf=\"form.get('passwords').hasError('notSame') \r\n             && form.get('passwords').get('confpassword').touched\"\r\n      >Пароли должны совпадать</mat-error>\r\n    </mat-form-field>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"example-container\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Имя</mat-label>\r\n    <input matInput placeholder=\"example@example.com\" formControlName=\"userName\" required>\r\n    <mat-error *ngIf=\"form.get('userName').invalid\">Введите имя</mat-error>\r\n  </mat-form-field>\r\n</div>\r\n  \r\n  <section class=\"example-section\">\r\n    <mat-checkbox\r\n     class=\"example-margin\"\r\n     formControlName=\"agree\"\r\n     required\r\n     >Согласен с правилами\r\n    </mat-checkbox>\r\n  </section>\r\n\r\n  <div class=\"form-group\">\r\n    <button \r\n    type=\"submit\" \r\n    class=\"submit_button\" \r\n    mat-raised-button color=\"primary\" \r\n    [disabled]=\"form.invalid\"\r\n    >Зарегистрироваться\r\n  </button>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <p class=\"text-muted text-xs-center\">\r\n      Есть аккаунт? <button [routerLink]=\"'/auth/login'\" mat-flat-button color=\"accent\">Войти!</button>\r\n    </p>\r\n  </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { UserValidateService } from 'src/app/shared/services/userValidate.service';\nimport { ResetUserPassword } from 'src/app/shared/models/auth/resetUserPassword.model';\nimport { MyErrorStateMatcher } from '../registration/registration.component';\nimport { AuthService } from 'src/app/shared/services/auth.service';\n\n@Component({\n  selector: 'reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n\n  form: FormGroup;\n  code: string;\n  resetUserPassword: ResetUserPassword;\n  matcher = new MyErrorStateMatcher();\n\n  constructor(\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private toastrService: ToastrService,\n    private userValidate: UserValidateService,\n    private authService: AuthService,\n    private activatedRoute: ActivatedRoute\n    ) { \n      activatedRoute.queryParams.subscribe(\n        (queryParam: any) => {\n          if(queryParam['code'] == null){\n            this.toastrService.warning(\"Code is null\")\n            this.router.navigate(['/auth/login'])\n          }\n            this.code = queryParam['code'];\n        }\n    );\n    }\n\n  ngOnInit() {\n    this.form = new FormGroup({\n      'email': new FormControl(null, [Validators.required, Validators.email]),\n      'passwords': this.formBuilder.group(\n        {\n          password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\n          confpassword: new FormControl(null)\n        }, { validator: this.checkPasswords })\n    });\n  }\n\n  onSubmit() {\n    this.resetUserPassword =\n    {\n      confirmPassword: this.form.value['passwords']['confpassword'],\n      password: this.form.value['passwords']['password'],\n      email: this.form.value['email'],\n      code: this.code\n    };\n    \n    this.authService.resetPassword(this.resetUserPassword).subscribe(data => {\n      this.toastrService.success(`Ваш пароль сброшен.`);\n      this.router.navigate(['/auth/login']);\n    });\n  }\n\n  getErrorMessageEmail() {\n    return this.userValidate.getErrorMessageEmail(this.form.get('email'));\n  }\n\n  getErrorMessagePassw() {\n    return this.userValidate.getErrorMessagePassw(this.form.get('passwords').get('password'));\n  }\n\n  checkPasswords(group: FormGroup) { // here we have the 'passwords' group\n    let pass = group.controls.password.value;\n    let confirmPass = group.controls.confpassword.value;\n\n    return pass === confirmPass ? null : { notSame: true }\n  }\n}\n","<h3>Форма для сброса пароля</h3>\n<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n\n    <div class=\"example-container\">\n        <mat-form-field appearance=\"fill\">\n          <mat-label>Введите email</mat-label>\n          <input \n                matInput \n                placeholder=\"example@example.com\" \n                formControlName=\"email\" \n                required/>\n          <mat-error *ngIf=\"form.get('email').invalid\">{{getErrorMessageEmail()}}</mat-error>\n        </mat-form-field>\n    </div>\n\n    <div formGroupName=\"passwords\">\n        <div class=\"example-container\">\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Введите пароль</mat-label>\n            <input \n            matInput \n            formControlName=\"password\" \n            type=\"password\"\n            required/>\n            <mat-error *ngIf=\"form.get('passwords').invalid\n                              && form.get('passwords').get('password').touched\"\n              >{{getErrorMessagePassw()}}\n            </mat-error>\n          </mat-form-field>\n        </div>\n      \n        <div class=\"example-container\">\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Повторите пароль</mat-label>\n            <input \n            matInput \n            formControlName=\"confpassword\" \n            type=\"password\"      \n            [errorStateMatcher]=\"matcher\"\n            required/>\n            <mat-error \n            *ngIf=\"form.get('passwords').hasError('notSame') \n                   && form.get('passwords').get('confpassword').touched\"\n            >Пароли должны совпадать</mat-error>\n          </mat-form-field>\n        </div>\n    </div>\n\n    <div class=\"form-group\">\n        <button \n        type=\"submit\" \n        class=\"submit_button\" \n        mat-raised-button color=\"primary\" \n        [disabled]=\"form.invalid\"\n        >Сбросить\n      </button>\n    </div>\n</form>"],"sourceRoot":"webpack:///"}